// Autogenerated from Pigeon (v25.1.0), do not edit directly.
// See also: https://pub.dev/packages/pigeon
@file:Suppress("UNCHECKED_CAST", "ArrayInDataClass")

package dev.hebei.bluetooth_low_energy_android

import android.util.Log
import io.flutter.plugin.common.BasicMessageChannel
import io.flutter.plugin.common.BinaryMessenger
import io.flutter.plugin.common.EventChannel
import io.flutter.plugin.common.MessageCodec
import io.flutter.plugin.common.StandardMethodCodec
import io.flutter.plugin.common.StandardMessageCodec
import java.io.ByteArrayOutputStream
import java.nio.ByteBuffer

private fun wrapResult(result: Any?): List<Any?> {
  return listOf(result)
}

private fun wrapError(exception: Throwable): List<Any?> {
  return if (exception is BluetoothLowEnergyError) {
    listOf(
      exception.code,
      exception.message,
      exception.details
    )
  } else {
    listOf(
      exception.javaClass.simpleName,
      exception.toString(),
      "Cause: " + exception.cause + ", Stacktrace: " + Log.getStackTraceString(exception)
    )
  }
}

private fun createConnectionError(channelName: String): BluetoothLowEnergyError {
  return BluetoothLowEnergyError("channel-error",  "Unable to establish connection on channel: '$channelName'.", "")}

/**
 * Error class for passing custom error details to Flutter via a thrown PlatformException.
 * @property code The error code.
 * @property message The error message.
 * @property details The error details. Must be a datatype supported by the api codec.
 */
class BluetoothLowEnergyError (
  val code: String,
  override val message: String? = null,
  val details: Any? = null
) : Throwable()

enum class BluetoothLowEnergyStateApi(val raw: Int) {
  UNKNOWN(0),
  UNSUPPORTED(1),
  UNAUTHORIZED(2),
  OFF(3),
  TURNING_ON(4),
  ON(5),
  TURNING_OFF(6);

  companion object {
    fun ofRaw(raw: Int): BluetoothLowEnergyStateApi? {
      return values().firstOrNull { it.raw == raw }
    }
  }
}

enum class ConnectionStateApi(val raw: Int) {
  DISCONNECTED(0),
  CONNECTING(1),
  CONNECTED(2),
  DISCONNECTING(3);

  companion object {
    fun ofRaw(raw: Int): ConnectionStateApi? {
      return values().firstOrNull { it.raw == raw }
    }
  }
}

enum class ConnectionPriorityApi(val raw: Int) {
  BALANCED(0),
  HIGH(1),
  LOW_POWER(2),
  DCK(3);

  companion object {
    fun ofRaw(raw: Int): ConnectionPriorityApi? {
      return values().firstOrNull { it.raw == raw }
    }
  }
}

enum class GATTPermissionApi(val raw: Int) {
  READ(0),
  READ_ENCRYPTED(1),
  WRITE(2),
  WRITE_ENCRYPTED(3);

  companion object {
    fun ofRaw(raw: Int): GATTPermissionApi? {
      return values().firstOrNull { it.raw == raw }
    }
  }
}

enum class GATTCharacteristicPropertyApi(val raw: Int) {
  READ(0),
  WRITE(1),
  WRITE_WITHOUT_RESPONSE(2),
  NOTIFY(3),
  INDICATE(4);

  companion object {
    fun ofRaw(raw: Int): GATTCharacteristicPropertyApi? {
      return values().firstOrNull { it.raw == raw }
    }
  }
}

enum class GATTCharacteristicWriteTypeApi(val raw: Int) {
  WITH_RESPONSE(0),
  WITHOUT_RESPONSE(1);

  companion object {
    fun ofRaw(raw: Int): GATTCharacteristicWriteTypeApi? {
      return values().firstOrNull { it.raw == raw }
    }
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class PeripheralApi (
  val address: String
)
 {
  companion object {
    fun fromList(pigeonVar_list: List<Any?>): PeripheralApi {
      val address = pigeonVar_list[0] as String
      return PeripheralApi(address)
    }
  }
  fun toList(): List<Any?> {
    return listOf(
      address,
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class ManufacturerSpecificDataApi (
  val id: Long,
  val data: ByteArray
)
 {
  companion object {
    fun fromList(pigeonVar_list: List<Any?>): ManufacturerSpecificDataApi {
      val id = pigeonVar_list[0] as Long
      val data = pigeonVar_list[1] as ByteArray
      return ManufacturerSpecificDataApi(id, data)
    }
  }
  fun toList(): List<Any?> {
    return listOf(
      id,
      data,
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class AdvertisementApi (
  val name: String? = null,
  val serviceUUIDs: List<String>,
  val serviceData: Map<String, ByteArray>,
  val manufacturerSpecificData: List<ManufacturerSpecificDataApi>
)
 {
  companion object {
    fun fromList(pigeonVar_list: List<Any?>): AdvertisementApi {
      val name = pigeonVar_list[0] as String?
      val serviceUUIDs = pigeonVar_list[1] as List<String>
      val serviceData = pigeonVar_list[2] as Map<String, ByteArray>
      val manufacturerSpecificData = pigeonVar_list[3] as List<ManufacturerSpecificDataApi>
      return AdvertisementApi(name, serviceUUIDs, serviceData, manufacturerSpecificData)
    }
  }
  fun toList(): List<Any?> {
    return listOf(
      name,
      serviceUUIDs,
      serviceData,
      manufacturerSpecificData,
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class GATTDescriptorApi (
  val id: Long,
  val uuid: String
)
 {
  companion object {
    fun fromList(pigeonVar_list: List<Any?>): GATTDescriptorApi {
      val id = pigeonVar_list[0] as Long
      val uuid = pigeonVar_list[1] as String
      return GATTDescriptorApi(id, uuid)
    }
  }
  fun toList(): List<Any?> {
    return listOf(
      id,
      uuid,
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class GATTCharacteristicApi (
  val id: Long,
  val uuid: String,
  val properties: List<GATTCharacteristicPropertyApi>,
  val descriptors: List<GATTDescriptorApi>
)
 {
  companion object {
    fun fromList(pigeonVar_list: List<Any?>): GATTCharacteristicApi {
      val id = pigeonVar_list[0] as Long
      val uuid = pigeonVar_list[1] as String
      val properties = pigeonVar_list[2] as List<GATTCharacteristicPropertyApi>
      val descriptors = pigeonVar_list[3] as List<GATTDescriptorApi>
      return GATTCharacteristicApi(id, uuid, properties, descriptors)
    }
  }
  fun toList(): List<Any?> {
    return listOf(
      id,
      uuid,
      properties,
      descriptors,
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class GATTServiceApi (
  val id: Long,
  val uuid: String,
  val isPrimary: Boolean,
  val includedServices: List<GATTServiceApi>,
  val characteristics: List<GATTCharacteristicApi>
)
 {
  companion object {
    fun fromList(pigeonVar_list: List<Any?>): GATTServiceApi {
      val id = pigeonVar_list[0] as Long
      val uuid = pigeonVar_list[1] as String
      val isPrimary = pigeonVar_list[2] as Boolean
      val includedServices = pigeonVar_list[3] as List<GATTServiceApi>
      val characteristics = pigeonVar_list[4] as List<GATTCharacteristicApi>
      return GATTServiceApi(id, uuid, isPrimary, includedServices, characteristics)
    }
  }
  fun toList(): List<Any?> {
    return listOf(
      id,
      uuid,
      isPrimary,
      includedServices,
      characteristics,
    )
  }
}
private open class BluetoothLowEnergyApiPigeonCodec : StandardMessageCodec() {
  override fun readValueOfType(type: Byte, buffer: ByteBuffer): Any? {
    return when (type) {
      129.toByte() -> {
        return (readValue(buffer) as Long?)?.let {
          BluetoothLowEnergyStateApi.ofRaw(it.toInt())
        }
      }
      130.toByte() -> {
        return (readValue(buffer) as Long?)?.let {
          ConnectionStateApi.ofRaw(it.toInt())
        }
      }
      131.toByte() -> {
        return (readValue(buffer) as Long?)?.let {
          ConnectionPriorityApi.ofRaw(it.toInt())
        }
      }
      132.toByte() -> {
        return (readValue(buffer) as Long?)?.let {
          GATTPermissionApi.ofRaw(it.toInt())
        }
      }
      133.toByte() -> {
        return (readValue(buffer) as Long?)?.let {
          GATTCharacteristicPropertyApi.ofRaw(it.toInt())
        }
      }
      134.toByte() -> {
        return (readValue(buffer) as Long?)?.let {
          GATTCharacteristicWriteTypeApi.ofRaw(it.toInt())
        }
      }
      135.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          PeripheralApi.fromList(it)
        }
      }
      136.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          ManufacturerSpecificDataApi.fromList(it)
        }
      }
      137.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          AdvertisementApi.fromList(it)
        }
      }
      138.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          GATTDescriptorApi.fromList(it)
        }
      }
      139.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          GATTCharacteristicApi.fromList(it)
        }
      }
      140.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          GATTServiceApi.fromList(it)
        }
      }
      else -> super.readValueOfType(type, buffer)
    }
  }
  override fun writeValue(stream: ByteArrayOutputStream, value: Any?)   {
    when (value) {
      is BluetoothLowEnergyStateApi -> {
        stream.write(129)
        writeValue(stream, value.raw)
      }
      is ConnectionStateApi -> {
        stream.write(130)
        writeValue(stream, value.raw)
      }
      is ConnectionPriorityApi -> {
        stream.write(131)
        writeValue(stream, value.raw)
      }
      is GATTPermissionApi -> {
        stream.write(132)
        writeValue(stream, value.raw)
      }
      is GATTCharacteristicPropertyApi -> {
        stream.write(133)
        writeValue(stream, value.raw)
      }
      is GATTCharacteristicWriteTypeApi -> {
        stream.write(134)
        writeValue(stream, value.raw)
      }
      is PeripheralApi -> {
        stream.write(135)
        writeValue(stream, value.toList())
      }
      is ManufacturerSpecificDataApi -> {
        stream.write(136)
        writeValue(stream, value.toList())
      }
      is AdvertisementApi -> {
        stream.write(137)
        writeValue(stream, value.toList())
      }
      is GATTDescriptorApi -> {
        stream.write(138)
        writeValue(stream, value.toList())
      }
      is GATTCharacteristicApi -> {
        stream.write(139)
        writeValue(stream, value.toList())
      }
      is GATTServiceApi -> {
        stream.write(140)
        writeValue(stream, value.toList())
      }
      else -> super.writeValue(stream, value)
    }
  }
}


/** Generated interface from Pigeon that represents a handler of messages from Flutter. */
interface CentralManagerHostApi {
  fun addStateChangedListener()
  fun removeStateChangedListener()
  fun addNameChangedListener()
  fun removeNameChangedListener()
  fun addDiscoveredListener()
  fun removeDiscoveredListener()
  fun addConnectionStateChangedListener()
  fun removeConnectionStateChangedListener()
  fun addMTUChanagedListener()
  fun removeMTUChangedListener()
  fun addCharacteristicNotifiedListener()
  fun removeCharacteristicNotifiedListener()
  fun getState(): BluetoothLowEnergyStateApi
  fun shouldShowAuthorizeRationale(): Boolean
  fun authorize(callback: (Result<Boolean>) -> Unit)
  fun showAppSettings()
  fun turnOn(callback: (Result<Unit>) -> Unit)
  fun turnOff(callback: (Result<Unit>) -> Unit)
  fun getName(): String?
  fun setName(name: String?, callback: (Result<String?>) -> Unit)
  fun startDiscovery(serviceUUIDs: List<String>, callback: (Result<Unit>) -> Unit)
  fun stopDiscovery()
  fun retrieveConnectedPeripherals(): List<PeripheralApi>
  fun connect(address: String, callback: (Result<Unit>) -> Unit)
  fun disconnect(address: String, callback: (Result<Unit>) -> Unit)
  fun requestMTU(address: String, mtu: Long, callback: (Result<Long>) -> Unit)
  fun requestConnectionPriority(address: String, priority: ConnectionPriorityApi)
  fun getMaximumWriteLength(address: String, type: GATTCharacteristicWriteTypeApi): Long
  fun readRSSI(address: String, callback: (Result<Long>) -> Unit)
  fun discoverServices(address: String, callback: (Result<List<GATTServiceApi>>) -> Unit)
  fun readCharacteristic(id: Long, callback: (Result<ByteArray>) -> Unit)
  fun writeCharacteristic(id: Long, value: ByteArray, type: GATTCharacteristicWriteTypeApi, callback: (Result<Unit>) -> Unit)
  fun setCharacteristicNotifyState(id: Long, state: Boolean, callback: (Result<Unit>) -> Unit)
  fun readDescriptor(id: Long, callback: (Result<ByteArray>) -> Unit)
  fun writeDescriptor(id: Long, value: ByteArray, callback: (Result<Unit>) -> Unit)

  companion object {
    /** The codec used by CentralManagerHostApi. */
    val codec: MessageCodec<Any?> by lazy {
      BluetoothLowEnergyApiPigeonCodec()
    }
    /** Sets up an instance of `CentralManagerHostApi` to handle messages through the `binaryMessenger`. */
    @JvmOverloads
    fun setUp(binaryMessenger: BinaryMessenger, api: CentralManagerHostApi?, messageChannelSuffix: String = "") {
      val separatedMessageChannelSuffix = if (messageChannelSuffix.isNotEmpty()) ".$messageChannelSuffix" else ""
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.bluetooth_low_energy_android.CentralManagerHostApi.addStateChangedListener$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { _, reply ->
            val wrapped: List<Any?> = try {
              api.addStateChangedListener()
              listOf(null)
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.bluetooth_low_energy_android.CentralManagerHostApi.removeStateChangedListener$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { _, reply ->
            val wrapped: List<Any?> = try {
              api.removeStateChangedListener()
              listOf(null)
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.bluetooth_low_energy_android.CentralManagerHostApi.addNameChangedListener$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { _, reply ->
            val wrapped: List<Any?> = try {
              api.addNameChangedListener()
              listOf(null)
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.bluetooth_low_energy_android.CentralManagerHostApi.removeNameChangedListener$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { _, reply ->
            val wrapped: List<Any?> = try {
              api.removeNameChangedListener()
              listOf(null)
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.bluetooth_low_energy_android.CentralManagerHostApi.addDiscoveredListener$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { _, reply ->
            val wrapped: List<Any?> = try {
              api.addDiscoveredListener()
              listOf(null)
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.bluetooth_low_energy_android.CentralManagerHostApi.removeDiscoveredListener$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { _, reply ->
            val wrapped: List<Any?> = try {
              api.removeDiscoveredListener()
              listOf(null)
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.bluetooth_low_energy_android.CentralManagerHostApi.addConnectionStateChangedListener$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { _, reply ->
            val wrapped: List<Any?> = try {
              api.addConnectionStateChangedListener()
              listOf(null)
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.bluetooth_low_energy_android.CentralManagerHostApi.removeConnectionStateChangedListener$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { _, reply ->
            val wrapped: List<Any?> = try {
              api.removeConnectionStateChangedListener()
              listOf(null)
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.bluetooth_low_energy_android.CentralManagerHostApi.addMTUChanagedListener$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { _, reply ->
            val wrapped: List<Any?> = try {
              api.addMTUChanagedListener()
              listOf(null)
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.bluetooth_low_energy_android.CentralManagerHostApi.removeMTUChangedListener$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { _, reply ->
            val wrapped: List<Any?> = try {
              api.removeMTUChangedListener()
              listOf(null)
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.bluetooth_low_energy_android.CentralManagerHostApi.addCharacteristicNotifiedListener$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { _, reply ->
            val wrapped: List<Any?> = try {
              api.addCharacteristicNotifiedListener()
              listOf(null)
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.bluetooth_low_energy_android.CentralManagerHostApi.removeCharacteristicNotifiedListener$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { _, reply ->
            val wrapped: List<Any?> = try {
              api.removeCharacteristicNotifiedListener()
              listOf(null)
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.bluetooth_low_energy_android.CentralManagerHostApi.getState$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { _, reply ->
            val wrapped: List<Any?> = try {
              listOf(api.getState())
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.bluetooth_low_energy_android.CentralManagerHostApi.shouldShowAuthorizeRationale$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { _, reply ->
            val wrapped: List<Any?> = try {
              listOf(api.shouldShowAuthorizeRationale())
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.bluetooth_low_energy_android.CentralManagerHostApi.authorize$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { _, reply ->
            api.authorize{ result: Result<Boolean> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.bluetooth_low_energy_android.CentralManagerHostApi.showAppSettings$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { _, reply ->
            val wrapped: List<Any?> = try {
              api.showAppSettings()
              listOf(null)
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.bluetooth_low_energy_android.CentralManagerHostApi.turnOn$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { _, reply ->
            api.turnOn{ result: Result<Unit> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                reply.reply(wrapResult(null))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.bluetooth_low_energy_android.CentralManagerHostApi.turnOff$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { _, reply ->
            api.turnOff{ result: Result<Unit> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                reply.reply(wrapResult(null))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.bluetooth_low_energy_android.CentralManagerHostApi.getName$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { _, reply ->
            val wrapped: List<Any?> = try {
              listOf(api.getName())
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.bluetooth_low_energy_android.CentralManagerHostApi.setName$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val nameArg = args[0] as String?
            api.setName(nameArg) { result: Result<String?> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.bluetooth_low_energy_android.CentralManagerHostApi.startDiscovery$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val serviceUUIDsArg = args[0] as List<String>
            api.startDiscovery(serviceUUIDsArg) { result: Result<Unit> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                reply.reply(wrapResult(null))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.bluetooth_low_energy_android.CentralManagerHostApi.stopDiscovery$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { _, reply ->
            val wrapped: List<Any?> = try {
              api.stopDiscovery()
              listOf(null)
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.bluetooth_low_energy_android.CentralManagerHostApi.retrieveConnectedPeripherals$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { _, reply ->
            val wrapped: List<Any?> = try {
              listOf(api.retrieveConnectedPeripherals())
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.bluetooth_low_energy_android.CentralManagerHostApi.connect$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val addressArg = args[0] as String
            api.connect(addressArg) { result: Result<Unit> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                reply.reply(wrapResult(null))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.bluetooth_low_energy_android.CentralManagerHostApi.disconnect$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val addressArg = args[0] as String
            api.disconnect(addressArg) { result: Result<Unit> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                reply.reply(wrapResult(null))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.bluetooth_low_energy_android.CentralManagerHostApi.requestMTU$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val addressArg = args[0] as String
            val mtuArg = args[1] as Long
            api.requestMTU(addressArg, mtuArg) { result: Result<Long> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.bluetooth_low_energy_android.CentralManagerHostApi.requestConnectionPriority$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val addressArg = args[0] as String
            val priorityArg = args[1] as ConnectionPriorityApi
            val wrapped: List<Any?> = try {
              api.requestConnectionPriority(addressArg, priorityArg)
              listOf(null)
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.bluetooth_low_energy_android.CentralManagerHostApi.getMaximumWriteLength$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val addressArg = args[0] as String
            val typeArg = args[1] as GATTCharacteristicWriteTypeApi
            val wrapped: List<Any?> = try {
              listOf(api.getMaximumWriteLength(addressArg, typeArg))
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.bluetooth_low_energy_android.CentralManagerHostApi.readRSSI$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val addressArg = args[0] as String
            api.readRSSI(addressArg) { result: Result<Long> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.bluetooth_low_energy_android.CentralManagerHostApi.discoverServices$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val addressArg = args[0] as String
            api.discoverServices(addressArg) { result: Result<List<GATTServiceApi>> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.bluetooth_low_energy_android.CentralManagerHostApi.readCharacteristic$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val idArg = args[0] as Long
            api.readCharacteristic(idArg) { result: Result<ByteArray> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.bluetooth_low_energy_android.CentralManagerHostApi.writeCharacteristic$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val idArg = args[0] as Long
            val valueArg = args[1] as ByteArray
            val typeArg = args[2] as GATTCharacteristicWriteTypeApi
            api.writeCharacteristic(idArg, valueArg, typeArg) { result: Result<Unit> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                reply.reply(wrapResult(null))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.bluetooth_low_energy_android.CentralManagerHostApi.setCharacteristicNotifyState$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val idArg = args[0] as Long
            val stateArg = args[1] as Boolean
            api.setCharacteristicNotifyState(idArg, stateArg) { result: Result<Unit> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                reply.reply(wrapResult(null))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.bluetooth_low_energy_android.CentralManagerHostApi.readDescriptor$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val idArg = args[0] as Long
            api.readDescriptor(idArg) { result: Result<ByteArray> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.bluetooth_low_energy_android.CentralManagerHostApi.writeDescriptor$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val idArg = args[0] as Long
            val valueArg = args[1] as ByteArray
            api.writeDescriptor(idArg, valueArg) { result: Result<Unit> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                reply.reply(wrapResult(null))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
    }
  }
}
/** Generated class from Pigeon that represents Flutter messages that can be called from Kotlin. */
class CentralManagerFlutterApi(private val binaryMessenger: BinaryMessenger, private val messageChannelSuffix: String = "") {
  companion object {
    /** The codec used by CentralManagerFlutterApi. */
    val codec: MessageCodec<Any?> by lazy {
      BluetoothLowEnergyApiPigeonCodec()
    }
  }
  fun onStateChanged(stateArg: BluetoothLowEnergyStateApi, callback: (Result<Unit>) -> Unit)
{
    val separatedMessageChannelSuffix = if (messageChannelSuffix.isNotEmpty()) ".$messageChannelSuffix" else ""
    val channelName = "dev.flutter.pigeon.bluetooth_low_energy_android.CentralManagerFlutterApi.onStateChanged$separatedMessageChannelSuffix"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(stateArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(BluetoothLowEnergyError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(createConnectionError(channelName)))
      } 
    }
  }
  fun onNameChanged(nameArg: String?, callback: (Result<Unit>) -> Unit)
{
    val separatedMessageChannelSuffix = if (messageChannelSuffix.isNotEmpty()) ".$messageChannelSuffix" else ""
    val channelName = "dev.flutter.pigeon.bluetooth_low_energy_android.CentralManagerFlutterApi.onNameChanged$separatedMessageChannelSuffix"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(nameArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(BluetoothLowEnergyError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(createConnectionError(channelName)))
      } 
    }
  }
  fun onDiscovered(peripheralArg: PeripheralApi, rssiArg: Long, advertisementArg: AdvertisementApi, callback: (Result<Unit>) -> Unit)
{
    val separatedMessageChannelSuffix = if (messageChannelSuffix.isNotEmpty()) ".$messageChannelSuffix" else ""
    val channelName = "dev.flutter.pigeon.bluetooth_low_energy_android.CentralManagerFlutterApi.onDiscovered$separatedMessageChannelSuffix"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(peripheralArg, rssiArg, advertisementArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(BluetoothLowEnergyError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(createConnectionError(channelName)))
      } 
    }
  }
  fun onConnectionStateChanged(peripheralArg: PeripheralApi, stateArg: ConnectionStateApi, callback: (Result<Unit>) -> Unit)
{
    val separatedMessageChannelSuffix = if (messageChannelSuffix.isNotEmpty()) ".$messageChannelSuffix" else ""
    val channelName = "dev.flutter.pigeon.bluetooth_low_energy_android.CentralManagerFlutterApi.onConnectionStateChanged$separatedMessageChannelSuffix"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(peripheralArg, stateArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(BluetoothLowEnergyError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(createConnectionError(channelName)))
      } 
    }
  }
  fun onMTUChanged(peripheralArg: PeripheralApi, mtuArg: Long, callback: (Result<Unit>) -> Unit)
{
    val separatedMessageChannelSuffix = if (messageChannelSuffix.isNotEmpty()) ".$messageChannelSuffix" else ""
    val channelName = "dev.flutter.pigeon.bluetooth_low_energy_android.CentralManagerFlutterApi.onMTUChanged$separatedMessageChannelSuffix"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(peripheralArg, mtuArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(BluetoothLowEnergyError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(createConnectionError(channelName)))
      } 
    }
  }
  fun onCharacteristicNotified(characteristicArg: GATTCharacteristicApi, valueArg: ByteArray, callback: (Result<Unit>) -> Unit)
{
    val separatedMessageChannelSuffix = if (messageChannelSuffix.isNotEmpty()) ".$messageChannelSuffix" else ""
    val channelName = "dev.flutter.pigeon.bluetooth_low_energy_android.CentralManagerFlutterApi.onCharacteristicNotified$separatedMessageChannelSuffix"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(characteristicArg, valueArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(BluetoothLowEnergyError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(createConnectionError(channelName)))
      } 
    }
  }
}
/** Generated interface from Pigeon that represents a handler of messages from Flutter. */
interface PeripheralManagerHostApi {

  companion object {
    /** The codec used by PeripheralManagerHostApi. */
    val codec: MessageCodec<Any?> by lazy {
      BluetoothLowEnergyApiPigeonCodec()
    }
    /** Sets up an instance of `PeripheralManagerHostApi` to handle messages through the `binaryMessenger`. */
    @JvmOverloads
    fun setUp(binaryMessenger: BinaryMessenger, api: PeripheralManagerHostApi?, messageChannelSuffix: String = "") {
      val separatedMessageChannelSuffix = if (messageChannelSuffix.isNotEmpty()) ".$messageChannelSuffix" else ""
    }
  }
}
/** Generated class from Pigeon that represents Flutter messages that can be called from Kotlin. */
class PeripheralManagerFlutterApi(private val binaryMessenger: BinaryMessenger, private val messageChannelSuffix: String = "") {
  companion object {
    /** The codec used by PeripheralManagerFlutterApi. */
    val codec: MessageCodec<Any?> by lazy {
      BluetoothLowEnergyApiPigeonCodec()
    }
  }
}
