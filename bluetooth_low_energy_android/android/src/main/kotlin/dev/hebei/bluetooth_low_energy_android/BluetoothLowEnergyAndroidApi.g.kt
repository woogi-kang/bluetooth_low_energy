// Autogenerated from Pigeon (v24.2.2), do not edit directly.
// See also: https://pub.dev/packages/pigeon
@file:Suppress("UNCHECKED_CAST", "ArrayInDataClass")

package dev.hebei.bluetooth_low_energy_android

import android.util.Log
import io.flutter.plugin.common.BasicMessageChannel
import io.flutter.plugin.common.BinaryMessenger
import io.flutter.plugin.common.EventChannel
import io.flutter.plugin.common.MessageCodec
import io.flutter.plugin.common.StandardMethodCodec
import io.flutter.plugin.common.StandardMessageCodec
import java.io.ByteArrayOutputStream
import java.nio.ByteBuffer

private fun wrapResult(result: Any?): List<Any?> {
  return listOf(result)
}

private fun wrapError(exception: Throwable): List<Any?> {
  return if (exception is BluetoothLowEnergyAndroidError) {
    listOf(
      exception.code,
      exception.message,
      exception.details
    )
  } else {
    listOf(
      exception.javaClass.simpleName,
      exception.toString(),
      "Cause: " + exception.cause + ", Stacktrace: " + Log.getStackTraceString(exception)
    )
  }
}

private fun createConnectionError(channelName: String): BluetoothLowEnergyAndroidError {
  return BluetoothLowEnergyAndroidError("channel-error",  "Unable to establish connection on channel: '$channelName'.", "")}

/**
 * Error class for passing custom error details to Flutter via a thrown PlatformException.
 * @property code The error code.
 * @property message The error message.
 * @property details The error details. Must be a datatype supported by the api codec.
 */
class BluetoothLowEnergyAndroidError (
  val code: String,
  override val message: String? = null,
  val details: Any? = null
) : Throwable()
/**
 * Maintains instances used to communicate with the corresponding objects in Dart.
 *
 * Objects stored in this container are represented by an object in Dart that is also stored in
 * an InstanceManager with the same identifier.
 *
 * When an instance is added with an identifier, either can be used to retrieve the other.
 *
 * Added instances are added as a weak reference and a strong reference. When the strong
 * reference is removed with [remove] and the weak reference is deallocated, the
 * `finalizationListener.onFinalize` is called with the instance's identifier. However, if the strong
 * reference is removed and then the identifier is retrieved with the intention to pass the identifier
 * to Dart (e.g. calling [getIdentifierForStrongReference]), the strong reference to the instance
 * is recreated. The strong reference will then need to be removed manually again.
 */
@Suppress("UNCHECKED_CAST", "MemberVisibilityCanBePrivate")
class BluetoothLowEnergyAndroidApiPigeonInstanceManager(private val finalizationListener: PigeonFinalizationListener) {
  /** Interface for listening when a weak reference of an instance is removed from the manager.  */
  interface PigeonFinalizationListener {
    fun onFinalize(identifier: Long)
  }

  private val identifiers = java.util.WeakHashMap<Any, Long>()
  private val weakInstances = HashMap<Long, java.lang.ref.WeakReference<Any>>()
  private val strongInstances = HashMap<Long, Any>()
  private val referenceQueue = java.lang.ref.ReferenceQueue<Any>()
  private val weakReferencesToIdentifiers = HashMap<java.lang.ref.WeakReference<Any>, Long>()
  private val handler = android.os.Handler(android.os.Looper.getMainLooper())
  private var nextIdentifier: Long = minHostCreatedIdentifier
  private var hasFinalizationListenerStopped = false

  /**
   * Modifies the time interval used to define how often this instance removes garbage collected
   * weak references to native Android objects that this instance was managing.
   */
  var clearFinalizedWeakReferencesInterval: Long = 3000
    set(value) {
      handler.removeCallbacks { this.releaseAllFinalizedInstances() }
      field = value
      releaseAllFinalizedInstances()
    }

  init {
    handler.postDelayed(
      { releaseAllFinalizedInstances() },
      clearFinalizedWeakReferencesInterval
    )
  }

  companion object {
    // Identifiers are locked to a specific range to avoid collisions with objects
    // created simultaneously from Dart.
    // Host uses identifiers >= 2^16 and Dart is expected to use values n where,
    // 0 <= n < 2^16.
    private const val minHostCreatedIdentifier: Long = 65536
    private const val tag = "PigeonInstanceManager"

    /**
     * Instantiate a new manager with a listener for garbage collected weak
     * references.
     *
     * When the manager is no longer needed, [stopFinalizationListener] must be called.
     */
    fun create(finalizationListener: PigeonFinalizationListener): BluetoothLowEnergyAndroidApiPigeonInstanceManager {
      return BluetoothLowEnergyAndroidApiPigeonInstanceManager(finalizationListener)
    }
  }

  /**
   * Removes `identifier` and return its associated strongly referenced instance, if present,
   * from the manager.
   */
  fun <T> remove(identifier: Long): T? {
    logWarningIfFinalizationListenerHasStopped()
    return strongInstances.remove(identifier) as T?
  }

  /**
   * Retrieves the identifier paired with an instance, if present, otherwise `null`.
   *
   *
   * If the manager contains a strong reference to `instance`, it will return the identifier
   * associated with `instance`. If the manager contains only a weak reference to `instance`, a new
   * strong reference to `instance` will be added and will need to be removed again with [remove].
   *
   *
   * If this method returns a nonnull identifier, this method also expects the Dart
   * `BluetoothLowEnergyAndroidApiPigeonInstanceManager` to have, or recreate, a weak reference to the Dart instance the
   * identifier is associated with.
   */
  fun getIdentifierForStrongReference(instance: Any?): Long? {
    logWarningIfFinalizationListenerHasStopped()
    val identifier = identifiers[instance]
    if (identifier != null) {
      strongInstances[identifier] = instance!!
    }
    return identifier
  }

  /**
   * Adds a new instance that was instantiated from Dart.
   *
   * The same instance can be added multiple times, but each identifier must be unique. This
   * allows two objects that are equivalent (e.g. the `equals` method returns true and their
   * hashcodes are equal) to both be added.
   *
   * [identifier] must be >= 0 and unique.
   */
  fun addDartCreatedInstance(instance: Any, identifier: Long) {
    logWarningIfFinalizationListenerHasStopped()
    addInstance(instance, identifier)
  }

  /**
   * Adds a new unique instance that was instantiated from the host platform.
   *
   * [identifier] must be >= 0 and unique.
   */
  fun addHostCreatedInstance(instance: Any): Long {
    logWarningIfFinalizationListenerHasStopped()
    require(!containsInstance(instance)) { "Instance of ${instance.javaClass} has already been added." }
    val identifier = nextIdentifier++
    addInstance(instance, identifier)
    return identifier
  }

  /** Retrieves the instance associated with identifier, if present, otherwise `null`. */
  fun <T> getInstance(identifier: Long): T? {
    logWarningIfFinalizationListenerHasStopped()
    val instance = weakInstances[identifier] as java.lang.ref.WeakReference<T>?
    return instance?.get()
  }

  /** Returns whether this manager contains the given `instance`. */
  fun containsInstance(instance: Any?): Boolean {
    logWarningIfFinalizationListenerHasStopped()
    return identifiers.containsKey(instance)
  }

  /**
   * Stops the periodic run of the [PigeonFinalizationListener] for instances that have been garbage
   * collected.
   *
   * The InstanceManager can continue to be used, but the [PigeonFinalizationListener] will no
   * longer be called and methods will log a warning.
   */
  fun stopFinalizationListener() {
    handler.removeCallbacks { this.releaseAllFinalizedInstances() }
    hasFinalizationListenerStopped = true
  }

  /**
   * Removes all of the instances from this manager.
   *
   * The manager will be empty after this call returns.
   */
  fun clear() {
    identifiers.clear()
    weakInstances.clear()
    strongInstances.clear()
    weakReferencesToIdentifiers.clear()
  }

  /**
   * Whether the [PigeonFinalizationListener] is still being called for instances that are garbage
   * collected.
   *
   * See [stopFinalizationListener].
   */
  fun hasFinalizationListenerStopped(): Boolean {
    return hasFinalizationListenerStopped
  }

  private fun releaseAllFinalizedInstances() {
    if (hasFinalizationListenerStopped()) {
      return
    }
    var reference: java.lang.ref.WeakReference<Any>?
    while ((referenceQueue.poll() as java.lang.ref.WeakReference<Any>?).also { reference = it } != null) {
      val identifier = weakReferencesToIdentifiers.remove(reference)
      if (identifier != null) {
        weakInstances.remove(identifier)
        strongInstances.remove(identifier)
        finalizationListener.onFinalize(identifier)
      }
    }
    handler.postDelayed(
      { releaseAllFinalizedInstances() },
      clearFinalizedWeakReferencesInterval
    )
  }

  private fun addInstance(instance: Any, identifier: Long) {
    require(identifier >= 0) { "Identifier must be >= 0: $identifier" }
    require(!weakInstances.containsKey(identifier)) {
      "Identifier has already been added: $identifier"
    }
    val weakReference = java.lang.ref.WeakReference(instance, referenceQueue)
    identifiers[instance] = identifier
    weakInstances[identifier] = weakReference
    weakReferencesToIdentifiers[weakReference] = identifier
    strongInstances[identifier] = instance
  }

  private fun logWarningIfFinalizationListenerHasStopped() {
    if (hasFinalizationListenerStopped()) {
      Log.w(
        tag,
        "The manager was used after calls to the PigeonFinalizationListener has been stopped."
      )
    }
  }
}


/** Generated API for managing the Dart and native `InstanceManager`s. */
private class BluetoothLowEnergyAndroidApiPigeonInstanceManagerApi(val binaryMessenger: BinaryMessenger) {
  companion object {
    /** The codec used by BluetoothLowEnergyAndroidApiPigeonInstanceManagerApi. */
    val codec: MessageCodec<Any?> by lazy {
      BluetoothLowEnergyAndroidApiPigeonCodec()
    }

    /**
     * Sets up an instance of `BluetoothLowEnergyAndroidApiPigeonInstanceManagerApi` to handle messages from the
     * `binaryMessenger`.
     */
    fun setUpMessageHandlers(binaryMessenger: BinaryMessenger, instanceManager: BluetoothLowEnergyAndroidApiPigeonInstanceManager?) {
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.bluetooth_low_energy_android.PigeonInternalInstanceManager.removeStrongReference", codec)
        if (instanceManager != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val identifierArg = args[0] as Long
            val wrapped: List<Any?> = try {
              instanceManager.remove<Any?>(identifierArg)
              listOf(null)
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.bluetooth_low_energy_android.PigeonInternalInstanceManager.clear", codec)
        if (instanceManager != null) {
          channel.setMessageHandler { _, reply ->
            val wrapped: List<Any?> = try {
              instanceManager.clear()
              listOf(null)
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
    }
  }

  fun removeStrongReference(identifierArg: Long, callback: (Result<Unit>) -> Unit)
{
    val channelName = "dev.flutter.pigeon.bluetooth_low_energy_android.PigeonInternalInstanceManager.removeStrongReference"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(identifierArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(BluetoothLowEnergyAndroidError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(createConnectionError(channelName)))
      } 
    }
  }
}
/**
 * Provides implementations for each ProxyApi implementation and provides access to resources
 * needed by any implementation.
 */
abstract class BluetoothLowEnergyAndroidApiPigeonProxyApiRegistrar(val binaryMessenger: BinaryMessenger) {
  /** Whether APIs should ignore calling to Dart. */
  public var ignoreCallsToDart = false
  val instanceManager: BluetoothLowEnergyAndroidApiPigeonInstanceManager
  private var _codec: MessageCodec<Any?>? = null
  val codec: MessageCodec<Any?>
    get() {
      if (_codec == null) {
        _codec = BluetoothLowEnergyAndroidApiPigeonProxyApiBaseCodec(this)
      }
      return _codec!!
    }

  init {
    val api = BluetoothLowEnergyAndroidApiPigeonInstanceManagerApi(binaryMessenger)
    instanceManager = BluetoothLowEnergyAndroidApiPigeonInstanceManager.create(
      object : BluetoothLowEnergyAndroidApiPigeonInstanceManager.PigeonFinalizationListener {
        override fun onFinalize(identifier: Long) {
          api.removeStrongReference(identifier) {
            if (it.isFailure) {
              Log.e(
                "PigeonProxyApiRegistrar",
                "Failed to remove Dart strong reference with identifier: $identifier"
              )
            }
          }
        }
      }
    )
  }
  /**
   * An implementation of [PigeonApiBluetoothLowEnergyManagerApi] used to add a new Dart instance of
   * `BluetoothLowEnergyManagerApi` to the Dart `InstanceManager`.
   */
  abstract fun getPigeonApiBluetoothLowEnergyManagerApi(): PigeonApiBluetoothLowEnergyManagerApi

  /**
   * An implementation of [PigeonApiStateChangedListenerApi] used to add a new Dart instance of
   * `StateChangedListenerApi` to the Dart `InstanceManager`.
   */
  abstract fun getPigeonApiStateChangedListenerApi(): PigeonApiStateChangedListenerApi

  /**
   * An implementation of [PigeonApiNameChangedListenerApi] used to add a new Dart instance of
   * `NameChangedListenerApi` to the Dart `InstanceManager`.
   */
  abstract fun getPigeonApiNameChangedListenerApi(): PigeonApiNameChangedListenerApi

  /**
   * An implementation of [PigeonApiCentralManagerApi] used to add a new Dart instance of
   * `CentralManagerApi` to the Dart `InstanceManager`.
   */
  abstract fun getPigeonApiCentralManagerApi(): PigeonApiCentralManagerApi

  /**
   * An implementation of [PigeonApiDiscoveredListenerApi] used to add a new Dart instance of
   * `DiscoveredListenerApi` to the Dart `InstanceManager`.
   */
  abstract fun getPigeonApiDiscoveredListenerApi(): PigeonApiDiscoveredListenerApi

  /**
   * An implementation of [PigeonApiConnectionStateChangedListenerApi] used to add a new Dart instance of
   * `ConnectionStateChangedListenerApi` to the Dart `InstanceManager`.
   */
  abstract fun getPigeonApiConnectionStateChangedListenerApi(): PigeonApiConnectionStateChangedListenerApi

  /**
   * An implementation of [PigeonApiMTUChangedListenerApi] used to add a new Dart instance of
   * `MTUChangedListenerApi` to the Dart `InstanceManager`.
   */
  abstract fun getPigeonApiMTUChangedListenerApi(): PigeonApiMTUChangedListenerApi

  /**
   * An implementation of [PigeonApiCharacteristicNotifiedListenerApi] used to add a new Dart instance of
   * `CharacteristicNotifiedListenerApi` to the Dart `InstanceManager`.
   */
  abstract fun getPigeonApiCharacteristicNotifiedListenerApi(): PigeonApiCharacteristicNotifiedListenerApi

  /**
   * An implementation of [PigeonApiBluetoothLowEnergyPeerApi] used to add a new Dart instance of
   * `BluetoothLowEnergyPeerApi` to the Dart `InstanceManager`.
   */
  abstract fun getPigeonApiBluetoothLowEnergyPeerApi(): PigeonApiBluetoothLowEnergyPeerApi

  /**
   * An implementation of [PigeonApiPeripheralApi] used to add a new Dart instance of
   * `PeripheralApi` to the Dart `InstanceManager`.
   */
  open fun getPigeonApiPeripheralApi(): PigeonApiPeripheralApi
  {
    return PigeonApiPeripheralApi(this)
  }

  /**
   * An implementation of [PigeonApiGATTAttributeApi] used to add a new Dart instance of
   * `GATTAttributeApi` to the Dart `InstanceManager`.
   */
  abstract fun getPigeonApiGATTAttributeApi(): PigeonApiGATTAttributeApi

  /**
   * An implementation of [PigeonApiGATTDescriptorApi] used to add a new Dart instance of
   * `GATTDescriptorApi` to the Dart `InstanceManager`.
   */
  open fun getPigeonApiGATTDescriptorApi(): PigeonApiGATTDescriptorApi
  {
    return PigeonApiGATTDescriptorApi(this)
  }

  /**
   * An implementation of [PigeonApiGATTCharacteristicApi] used to add a new Dart instance of
   * `GATTCharacteristicApi` to the Dart `InstanceManager`.
   */
  abstract fun getPigeonApiGATTCharacteristicApi(): PigeonApiGATTCharacteristicApi

  /**
   * An implementation of [PigeonApiGATTServiceApi] used to add a new Dart instance of
   * `GATTServiceApi` to the Dart `InstanceManager`.
   */
  abstract fun getPigeonApiGATTServiceApi(): PigeonApiGATTServiceApi

  fun setUp() {
    BluetoothLowEnergyAndroidApiPigeonInstanceManagerApi.setUpMessageHandlers(binaryMessenger, instanceManager)
    PigeonApiBluetoothLowEnergyManagerApi.setUpMessageHandlers(binaryMessenger, getPigeonApiBluetoothLowEnergyManagerApi())
    PigeonApiStateChangedListenerApi.setUpMessageHandlers(binaryMessenger, getPigeonApiStateChangedListenerApi())
    PigeonApiNameChangedListenerApi.setUpMessageHandlers(binaryMessenger, getPigeonApiNameChangedListenerApi())
    PigeonApiCentralManagerApi.setUpMessageHandlers(binaryMessenger, getPigeonApiCentralManagerApi())
    PigeonApiDiscoveredListenerApi.setUpMessageHandlers(binaryMessenger, getPigeonApiDiscoveredListenerApi())
    PigeonApiConnectionStateChangedListenerApi.setUpMessageHandlers(binaryMessenger, getPigeonApiConnectionStateChangedListenerApi())
    PigeonApiMTUChangedListenerApi.setUpMessageHandlers(binaryMessenger, getPigeonApiMTUChangedListenerApi())
    PigeonApiCharacteristicNotifiedListenerApi.setUpMessageHandlers(binaryMessenger, getPigeonApiCharacteristicNotifiedListenerApi())
    PigeonApiBluetoothLowEnergyPeerApi.setUpMessageHandlers(binaryMessenger, getPigeonApiBluetoothLowEnergyPeerApi())
    PigeonApiGATTAttributeApi.setUpMessageHandlers(binaryMessenger, getPigeonApiGATTAttributeApi())
    PigeonApiGATTCharacteristicApi.setUpMessageHandlers(binaryMessenger, getPigeonApiGATTCharacteristicApi())
    PigeonApiGATTServiceApi.setUpMessageHandlers(binaryMessenger, getPigeonApiGATTServiceApi())
  }
  fun tearDown() {
    BluetoothLowEnergyAndroidApiPigeonInstanceManagerApi.setUpMessageHandlers(binaryMessenger, null)
    PigeonApiBluetoothLowEnergyManagerApi.setUpMessageHandlers(binaryMessenger, null)
    PigeonApiStateChangedListenerApi.setUpMessageHandlers(binaryMessenger, null)
    PigeonApiNameChangedListenerApi.setUpMessageHandlers(binaryMessenger, null)
    PigeonApiCentralManagerApi.setUpMessageHandlers(binaryMessenger, null)
    PigeonApiDiscoveredListenerApi.setUpMessageHandlers(binaryMessenger, null)
    PigeonApiConnectionStateChangedListenerApi.setUpMessageHandlers(binaryMessenger, null)
    PigeonApiMTUChangedListenerApi.setUpMessageHandlers(binaryMessenger, null)
    PigeonApiCharacteristicNotifiedListenerApi.setUpMessageHandlers(binaryMessenger, null)
    PigeonApiBluetoothLowEnergyPeerApi.setUpMessageHandlers(binaryMessenger, null)
    PigeonApiGATTAttributeApi.setUpMessageHandlers(binaryMessenger, null)
    PigeonApiGATTCharacteristicApi.setUpMessageHandlers(binaryMessenger, null)
    PigeonApiGATTServiceApi.setUpMessageHandlers(binaryMessenger, null)
  }
}
private class BluetoothLowEnergyAndroidApiPigeonProxyApiBaseCodec(val registrar: BluetoothLowEnergyAndroidApiPigeonProxyApiRegistrar) : BluetoothLowEnergyAndroidApiPigeonCodec() {
  override fun readValueOfType(type: Byte, buffer: ByteBuffer): Any? {
    return when (type) {
      128.toByte() -> {
        val identifier: Long = readValue(buffer) as Long
        val instance: Any? = registrar.instanceManager.getInstance(identifier)
        if (instance == null) {
          Log.e(
            "PigeonProxyApiBaseCodec",
            "Failed to find instance with identifier: $identifier"
          )
        }
        return instance
      }
      else -> super.readValueOfType(type, buffer)
    }
  }

  override fun writeValue(stream: ByteArrayOutputStream, value: Any?) {
    if (value is Boolean || value is ByteArray || value is Double || value is DoubleArray || value is FloatArray || value is Int || value is IntArray || value is List<*> || value is Long || value is LongArray || value is Map<*, *> || value is String || value is BluetoothLowEnergyStateApi || value is ConnectionStateApi || value is ConnectionPriorityApi || value is GATTPermissionApi || value is GATTCharacteristicPropertyApi || value is GATTCharacteristicWriteTypeApi || value == null) {
      super.writeValue(stream, value)
      return
    }

    if (value is dev.hebei.bluetooth_low_energy_android.BluetoothLowEnergyManager.StateChangedListener) {
      registrar.getPigeonApiStateChangedListenerApi().pigeon_newInstance(value) { }
    }
     else if (value is dev.hebei.bluetooth_low_energy_android.BluetoothLowEnergyManager.NameChangedListener) {
      registrar.getPigeonApiNameChangedListenerApi().pigeon_newInstance(value) { }
    }
     else if (value is dev.hebei.bluetooth_low_energy_android.CentralManager) {
      registrar.getPigeonApiCentralManagerApi().pigeon_newInstance(value) { }
    }
     else if (value is dev.hebei.bluetooth_low_energy_android.BluetoothLowEnergyManager) {
      registrar.getPigeonApiBluetoothLowEnergyManagerApi().pigeon_newInstance(value) { }
    }
     else if (value is dev.hebei.bluetooth_low_energy_android.CentralManager.DiscoveredListener) {
      registrar.getPigeonApiDiscoveredListenerApi().pigeon_newInstance(value) { }
    }
     else if (value is dev.hebei.bluetooth_low_energy_android.CentralManager.ConnectionStateChangedListener) {
      registrar.getPigeonApiConnectionStateChangedListenerApi().pigeon_newInstance(value) { }
    }
     else if (value is dev.hebei.bluetooth_low_energy_android.CentralManager.MTUChangedListener) {
      registrar.getPigeonApiMTUChangedListenerApi().pigeon_newInstance(value) { }
    }
     else if (value is dev.hebei.bluetooth_low_energy_android.CentralManager.CharacteristicNotifiedListener) {
      registrar.getPigeonApiCharacteristicNotifiedListenerApi().pigeon_newInstance(value) { }
    }
     else if (value is dev.hebei.bluetooth_low_energy_android.Peripheral) {
      registrar.getPigeonApiPeripheralApi().pigeon_newInstance(value) { }
    }
     else if (value is dev.hebei.bluetooth_low_energy_android.BluetoothLowEnergyPeer) {
      registrar.getPigeonApiBluetoothLowEnergyPeerApi().pigeon_newInstance(value) { }
    }
     else if (value is dev.hebei.bluetooth_low_energy_android.GATTDescriptor) {
      registrar.getPigeonApiGATTDescriptorApi().pigeon_newInstance(value) { }
    }
     else if (value is dev.hebei.bluetooth_low_energy_android.GATTCharacteristic) {
      registrar.getPigeonApiGATTCharacteristicApi().pigeon_newInstance(value) { }
    }
     else if (value is dev.hebei.bluetooth_low_energy_android.GATTService) {
      registrar.getPigeonApiGATTServiceApi().pigeon_newInstance(value) { }
    }
     else if (value is dev.hebei.bluetooth_low_energy_android.GATTAttribute) {
      registrar.getPigeonApiGATTAttributeApi().pigeon_newInstance(value) { }
    }

    when {
      registrar.instanceManager.containsInstance(value) -> {
        stream.write(128)
        writeValue(stream, registrar.instanceManager.getIdentifierForStrongReference(value))
      }
      else -> throw IllegalArgumentException("Unsupported value: '$value' of type '${value.javaClass.name}'")
    }
  }
}

enum class BluetoothLowEnergyStateApi(val raw: Int) {
  UNKNOWN(0),
  UNSUPPORTED(1),
  UNAUTHORIZED(2),
  OFF(3),
  TURNING_ON(4),
  ON(5),
  TURNING_OFF(6);

  companion object {
    fun ofRaw(raw: Int): BluetoothLowEnergyStateApi? {
      return values().firstOrNull { it.raw == raw }
    }
  }
}

enum class ConnectionStateApi(val raw: Int) {
  DISCONNECTED(0),
  CONNECTING(1),
  CONNECTED(2),
  DISCONNECTING(3);

  companion object {
    fun ofRaw(raw: Int): ConnectionStateApi? {
      return values().firstOrNull { it.raw == raw }
    }
  }
}

enum class ConnectionPriorityApi(val raw: Int) {
  BALANCED(0),
  HIGH(1),
  LOW_POWER(2),
  DCK(3);

  companion object {
    fun ofRaw(raw: Int): ConnectionPriorityApi? {
      return values().firstOrNull { it.raw == raw }
    }
  }
}

enum class GATTPermissionApi(val raw: Int) {
  READ(0),
  READ_ENCRYPTED(1),
  WRITE(2),
  WRITE_ENCRYPTED(3);

  companion object {
    fun ofRaw(raw: Int): GATTPermissionApi? {
      return values().firstOrNull { it.raw == raw }
    }
  }
}

enum class GATTCharacteristicPropertyApi(val raw: Int) {
  READ(0),
  WRITE(1),
  WRITE_WITHOUT_RESPONSE(2),
  NOTIFY(3),
  INDICATE(4);

  companion object {
    fun ofRaw(raw: Int): GATTCharacteristicPropertyApi? {
      return values().firstOrNull { it.raw == raw }
    }
  }
}

enum class GATTCharacteristicWriteTypeApi(val raw: Int) {
  WITH_RESPONSE(0),
  WITHOUT_RESPONSE(1);

  companion object {
    fun ofRaw(raw: Int): GATTCharacteristicWriteTypeApi? {
      return values().firstOrNull { it.raw == raw }
    }
  }
}
private open class BluetoothLowEnergyAndroidApiPigeonCodec : StandardMessageCodec() {
  override fun readValueOfType(type: Byte, buffer: ByteBuffer): Any? {
    return when (type) {
      129.toByte() -> {
        return (readValue(buffer) as Long?)?.let {
          BluetoothLowEnergyStateApi.ofRaw(it.toInt())
        }
      }
      130.toByte() -> {
        return (readValue(buffer) as Long?)?.let {
          ConnectionStateApi.ofRaw(it.toInt())
        }
      }
      131.toByte() -> {
        return (readValue(buffer) as Long?)?.let {
          ConnectionPriorityApi.ofRaw(it.toInt())
        }
      }
      132.toByte() -> {
        return (readValue(buffer) as Long?)?.let {
          GATTPermissionApi.ofRaw(it.toInt())
        }
      }
      133.toByte() -> {
        return (readValue(buffer) as Long?)?.let {
          GATTCharacteristicPropertyApi.ofRaw(it.toInt())
        }
      }
      134.toByte() -> {
        return (readValue(buffer) as Long?)?.let {
          GATTCharacteristicWriteTypeApi.ofRaw(it.toInt())
        }
      }
      else -> super.readValueOfType(type, buffer)
    }
  }
  override fun writeValue(stream: ByteArrayOutputStream, value: Any?)   {
    when (value) {
      is BluetoothLowEnergyStateApi -> {
        stream.write(129)
        writeValue(stream, value.raw)
      }
      is ConnectionStateApi -> {
        stream.write(130)
        writeValue(stream, value.raw)
      }
      is ConnectionPriorityApi -> {
        stream.write(131)
        writeValue(stream, value.raw)
      }
      is GATTPermissionApi -> {
        stream.write(132)
        writeValue(stream, value.raw)
      }
      is GATTCharacteristicPropertyApi -> {
        stream.write(133)
        writeValue(stream, value.raw)
      }
      is GATTCharacteristicWriteTypeApi -> {
        stream.write(134)
        writeValue(stream, value.raw)
      }
      else -> super.writeValue(stream, value)
    }
  }
}

@Suppress("UNCHECKED_CAST")
abstract class PigeonApiBluetoothLowEnergyManagerApi(open val pigeonRegistrar: BluetoothLowEnergyAndroidApiPigeonProxyApiRegistrar) {
  abstract fun addStateChangedListener(pigeon_instance: dev.hebei.bluetooth_low_energy_android.BluetoothLowEnergyManager, listener: dev.hebei.bluetooth_low_energy_android.BluetoothLowEnergyManager.StateChangedListener)

  abstract fun removeStateChangedListener(pigeon_instance: dev.hebei.bluetooth_low_energy_android.BluetoothLowEnergyManager, listener: dev.hebei.bluetooth_low_energy_android.BluetoothLowEnergyManager.StateChangedListener)

  abstract fun addNameChangedListener(pigeon_instance: dev.hebei.bluetooth_low_energy_android.BluetoothLowEnergyManager, listener: dev.hebei.bluetooth_low_energy_android.BluetoothLowEnergyManager.NameChangedListener)

  abstract fun removeNameChangedListener(pigeon_instance: dev.hebei.bluetooth_low_energy_android.BluetoothLowEnergyManager, listener: dev.hebei.bluetooth_low_energy_android.BluetoothLowEnergyManager.NameChangedListener)

  abstract fun getState(pigeon_instance: dev.hebei.bluetooth_low_energy_android.BluetoothLowEnergyManager): BluetoothLowEnergyStateApi

  abstract fun turnOn(pigeon_instance: dev.hebei.bluetooth_low_energy_android.BluetoothLowEnergyManager, callback: (Result<Unit>) -> Unit)

  abstract fun turnOff(pigeon_instance: dev.hebei.bluetooth_low_energy_android.BluetoothLowEnergyManager, callback: (Result<Unit>) -> Unit)

  abstract fun getName(pigeon_instance: dev.hebei.bluetooth_low_energy_android.BluetoothLowEnergyManager): String?

  abstract fun setName(pigeon_instance: dev.hebei.bluetooth_low_energy_android.BluetoothLowEnergyManager, name: String?, callback: (Result<String?>) -> Unit)

  abstract fun shouldShowAuthorizeRationale(pigeon_instance: dev.hebei.bluetooth_low_energy_android.BluetoothLowEnergyManager): Boolean

  abstract fun authorize(pigeon_instance: dev.hebei.bluetooth_low_energy_android.BluetoothLowEnergyManager, callback: (Result<Boolean>) -> Unit)

  abstract fun showAppSettings(pigeon_instance: dev.hebei.bluetooth_low_energy_android.BluetoothLowEnergyManager)

  companion object {
    @Suppress("LocalVariableName")
    fun setUpMessageHandlers(binaryMessenger: BinaryMessenger, api: PigeonApiBluetoothLowEnergyManagerApi?) {
      val codec = api?.pigeonRegistrar?.codec ?: BluetoothLowEnergyAndroidApiPigeonCodec()
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.bluetooth_low_energy_android.BluetoothLowEnergyManagerApi.addStateChangedListener", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as dev.hebei.bluetooth_low_energy_android.BluetoothLowEnergyManager
            val listenerArg = args[1] as dev.hebei.bluetooth_low_energy_android.BluetoothLowEnergyManager.StateChangedListener
            val wrapped: List<Any?> = try {
              api.addStateChangedListener(pigeon_instanceArg, listenerArg)
              listOf(null)
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.bluetooth_low_energy_android.BluetoothLowEnergyManagerApi.removeStateChangedListener", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as dev.hebei.bluetooth_low_energy_android.BluetoothLowEnergyManager
            val listenerArg = args[1] as dev.hebei.bluetooth_low_energy_android.BluetoothLowEnergyManager.StateChangedListener
            val wrapped: List<Any?> = try {
              api.removeStateChangedListener(pigeon_instanceArg, listenerArg)
              listOf(null)
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.bluetooth_low_energy_android.BluetoothLowEnergyManagerApi.addNameChangedListener", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as dev.hebei.bluetooth_low_energy_android.BluetoothLowEnergyManager
            val listenerArg = args[1] as dev.hebei.bluetooth_low_energy_android.BluetoothLowEnergyManager.NameChangedListener
            val wrapped: List<Any?> = try {
              api.addNameChangedListener(pigeon_instanceArg, listenerArg)
              listOf(null)
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.bluetooth_low_energy_android.BluetoothLowEnergyManagerApi.removeNameChangedListener", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as dev.hebei.bluetooth_low_energy_android.BluetoothLowEnergyManager
            val listenerArg = args[1] as dev.hebei.bluetooth_low_energy_android.BluetoothLowEnergyManager.NameChangedListener
            val wrapped: List<Any?> = try {
              api.removeNameChangedListener(pigeon_instanceArg, listenerArg)
              listOf(null)
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.bluetooth_low_energy_android.BluetoothLowEnergyManagerApi.getState", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as dev.hebei.bluetooth_low_energy_android.BluetoothLowEnergyManager
            val wrapped: List<Any?> = try {
              listOf(api.getState(pigeon_instanceArg))
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.bluetooth_low_energy_android.BluetoothLowEnergyManagerApi.turnOn", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as dev.hebei.bluetooth_low_energy_android.BluetoothLowEnergyManager
            api.turnOn(pigeon_instanceArg) { result: Result<Unit> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                reply.reply(wrapResult(null))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.bluetooth_low_energy_android.BluetoothLowEnergyManagerApi.turnOff", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as dev.hebei.bluetooth_low_energy_android.BluetoothLowEnergyManager
            api.turnOff(pigeon_instanceArg) { result: Result<Unit> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                reply.reply(wrapResult(null))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.bluetooth_low_energy_android.BluetoothLowEnergyManagerApi.getName", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as dev.hebei.bluetooth_low_energy_android.BluetoothLowEnergyManager
            val wrapped: List<Any?> = try {
              listOf(api.getName(pigeon_instanceArg))
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.bluetooth_low_energy_android.BluetoothLowEnergyManagerApi.setName", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as dev.hebei.bluetooth_low_energy_android.BluetoothLowEnergyManager
            val nameArg = args[1] as String?
            api.setName(pigeon_instanceArg, nameArg) { result: Result<String?> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.bluetooth_low_energy_android.BluetoothLowEnergyManagerApi.shouldShowAuthorizeRationale", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as dev.hebei.bluetooth_low_energy_android.BluetoothLowEnergyManager
            val wrapped: List<Any?> = try {
              listOf(api.shouldShowAuthorizeRationale(pigeon_instanceArg))
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.bluetooth_low_energy_android.BluetoothLowEnergyManagerApi.authorize", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as dev.hebei.bluetooth_low_energy_android.BluetoothLowEnergyManager
            api.authorize(pigeon_instanceArg) { result: Result<Boolean> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.bluetooth_low_energy_android.BluetoothLowEnergyManagerApi.showAppSettings", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as dev.hebei.bluetooth_low_energy_android.BluetoothLowEnergyManager
            val wrapped: List<Any?> = try {
              api.showAppSettings(pigeon_instanceArg)
              listOf(null)
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
    }
  }

  @Suppress("LocalVariableName", "FunctionName")
  /** Creates a Dart instance of BluetoothLowEnergyManagerApi and attaches it to [pigeon_instanceArg]. */
  fun pigeon_newInstance(pigeon_instanceArg: dev.hebei.bluetooth_low_energy_android.BluetoothLowEnergyManager, callback: (Result<Unit>) -> Unit)
{
    if (pigeonRegistrar.ignoreCallsToDart) {
      callback(
          Result.failure(
              BluetoothLowEnergyAndroidError("ignore-calls-error", "Calls to Dart are being ignored.", "")))
    }     else if (pigeonRegistrar.instanceManager.containsInstance(pigeon_instanceArg)) {
      callback(Result.success(Unit))
    }     else {
      val pigeon_identifierArg = pigeonRegistrar.instanceManager.addHostCreatedInstance(pigeon_instanceArg)
      val binaryMessenger = pigeonRegistrar.binaryMessenger
      val codec = pigeonRegistrar.codec
      val channelName = "dev.flutter.pigeon.bluetooth_low_energy_android.BluetoothLowEnergyManagerApi.pigeon_newInstance"
      val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
      channel.send(listOf(pigeon_identifierArg)) {
        if (it is List<*>) {
          if (it.size > 1) {
            callback(Result.failure(BluetoothLowEnergyAndroidError(it[0] as String, it[1] as String, it[2] as String?)))
          } else {
            callback(Result.success(Unit))
          }
        } else {
          callback(Result.failure(createConnectionError(channelName)))
        } 
      }
    }
  }

}
@Suppress("UNCHECKED_CAST")
abstract class PigeonApiStateChangedListenerApi(open val pigeonRegistrar: BluetoothLowEnergyAndroidApiPigeonProxyApiRegistrar) {
  abstract fun pigeon_defaultConstructor(): dev.hebei.bluetooth_low_energy_android.BluetoothLowEnergyManager.StateChangedListener

  companion object {
    @Suppress("LocalVariableName")
    fun setUpMessageHandlers(binaryMessenger: BinaryMessenger, api: PigeonApiStateChangedListenerApi?) {
      val codec = api?.pigeonRegistrar?.codec ?: BluetoothLowEnergyAndroidApiPigeonCodec()
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.bluetooth_low_energy_android.StateChangedListenerApi.pigeon_defaultConstructor", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_identifierArg = args[0] as Long
            val wrapped: List<Any?> = try {
              api.pigeonRegistrar.instanceManager.addDartCreatedInstance(api.pigeon_defaultConstructor(), pigeon_identifierArg)
              listOf(null)
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
    }
  }

  @Suppress("LocalVariableName", "FunctionName")
  /** Creates a Dart instance of StateChangedListenerApi and attaches it to [pigeon_instanceArg]. */
  fun pigeon_newInstance(pigeon_instanceArg: dev.hebei.bluetooth_low_energy_android.BluetoothLowEnergyManager.StateChangedListener, callback: (Result<Unit>) -> Unit)
{
    if (pigeonRegistrar.ignoreCallsToDart) {
      callback(
          Result.failure(
              BluetoothLowEnergyAndroidError("ignore-calls-error", "Calls to Dart are being ignored.", "")))
    }     else if (pigeonRegistrar.instanceManager.containsInstance(pigeon_instanceArg)) {
      callback(Result.success(Unit))
    }     else {
      callback(
          Result.failure(
              BluetoothLowEnergyAndroidError("new-instance-error", "Attempting to create a new Dart instance of StateChangedListenerApi, but the class has a nonnull callback method.", "")))
    }
  }

  fun onChanged(pigeon_instanceArg: dev.hebei.bluetooth_low_energy_android.BluetoothLowEnergyManager.StateChangedListener, stateArg: BluetoothLowEnergyStateApi, callback: (Result<Unit>) -> Unit)
{
    if (pigeonRegistrar.ignoreCallsToDart) {
      callback(
          Result.failure(
              BluetoothLowEnergyAndroidError("ignore-calls-error", "Calls to Dart are being ignored.", "")))
      return
    }
    val binaryMessenger = pigeonRegistrar.binaryMessenger
    val codec = pigeonRegistrar.codec
    val channelName = "dev.flutter.pigeon.bluetooth_low_energy_android.StateChangedListenerApi.onChanged"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(pigeon_instanceArg, stateArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(BluetoothLowEnergyAndroidError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(createConnectionError(channelName)))
      } 
    }
  }

}
@Suppress("UNCHECKED_CAST")
abstract class PigeonApiNameChangedListenerApi(open val pigeonRegistrar: BluetoothLowEnergyAndroidApiPigeonProxyApiRegistrar) {
  abstract fun pigeon_defaultConstructor(): dev.hebei.bluetooth_low_energy_android.BluetoothLowEnergyManager.NameChangedListener

  companion object {
    @Suppress("LocalVariableName")
    fun setUpMessageHandlers(binaryMessenger: BinaryMessenger, api: PigeonApiNameChangedListenerApi?) {
      val codec = api?.pigeonRegistrar?.codec ?: BluetoothLowEnergyAndroidApiPigeonCodec()
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.bluetooth_low_energy_android.NameChangedListenerApi.pigeon_defaultConstructor", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_identifierArg = args[0] as Long
            val wrapped: List<Any?> = try {
              api.pigeonRegistrar.instanceManager.addDartCreatedInstance(api.pigeon_defaultConstructor(), pigeon_identifierArg)
              listOf(null)
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
    }
  }

  @Suppress("LocalVariableName", "FunctionName")
  /** Creates a Dart instance of NameChangedListenerApi and attaches it to [pigeon_instanceArg]. */
  fun pigeon_newInstance(pigeon_instanceArg: dev.hebei.bluetooth_low_energy_android.BluetoothLowEnergyManager.NameChangedListener, callback: (Result<Unit>) -> Unit)
{
    if (pigeonRegistrar.ignoreCallsToDart) {
      callback(
          Result.failure(
              BluetoothLowEnergyAndroidError("ignore-calls-error", "Calls to Dart are being ignored.", "")))
    }     else if (pigeonRegistrar.instanceManager.containsInstance(pigeon_instanceArg)) {
      callback(Result.success(Unit))
    }     else {
      callback(
          Result.failure(
              BluetoothLowEnergyAndroidError("new-instance-error", "Attempting to create a new Dart instance of NameChangedListenerApi, but the class has a nonnull callback method.", "")))
    }
  }

  fun onChanged(pigeon_instanceArg: dev.hebei.bluetooth_low_energy_android.BluetoothLowEnergyManager.NameChangedListener, nameArg: String?, callback: (Result<Unit>) -> Unit)
{
    if (pigeonRegistrar.ignoreCallsToDart) {
      callback(
          Result.failure(
              BluetoothLowEnergyAndroidError("ignore-calls-error", "Calls to Dart are being ignored.", "")))
      return
    }
    val binaryMessenger = pigeonRegistrar.binaryMessenger
    val codec = pigeonRegistrar.codec
    val channelName = "dev.flutter.pigeon.bluetooth_low_energy_android.NameChangedListenerApi.onChanged"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(pigeon_instanceArg, nameArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(BluetoothLowEnergyAndroidError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(createConnectionError(channelName)))
      } 
    }
  }

}
@Suppress("UNCHECKED_CAST")
abstract class PigeonApiCentralManagerApi(open val pigeonRegistrar: BluetoothLowEnergyAndroidApiPigeonProxyApiRegistrar) {
  abstract fun pigeon_defaultConstructor(): dev.hebei.bluetooth_low_energy_android.CentralManager

  abstract fun addDiscoveredListener(pigeon_instance: dev.hebei.bluetooth_low_energy_android.CentralManager, listener: dev.hebei.bluetooth_low_energy_android.CentralManager.DiscoveredListener)

  abstract fun removeDiscoveredListener(pigeon_instance: dev.hebei.bluetooth_low_energy_android.CentralManager, listener: dev.hebei.bluetooth_low_energy_android.CentralManager.DiscoveredListener)

  abstract fun addConnectionStateChangedListener(pigeon_instance: dev.hebei.bluetooth_low_energy_android.CentralManager, listener: dev.hebei.bluetooth_low_energy_android.CentralManager.ConnectionStateChangedListener)

  abstract fun removeConnectionStateChangedListener(pigeon_instance: dev.hebei.bluetooth_low_energy_android.CentralManager, listener: dev.hebei.bluetooth_low_energy_android.CentralManager.ConnectionStateChangedListener)

  abstract fun addMTUChanagedListener(pigeon_instance: dev.hebei.bluetooth_low_energy_android.CentralManager, listener: dev.hebei.bluetooth_low_energy_android.CentralManager.MTUChangedListener)

  abstract fun removeMTUChangedListener(pigeon_instance: dev.hebei.bluetooth_low_energy_android.CentralManager, listener: dev.hebei.bluetooth_low_energy_android.CentralManager.MTUChangedListener)

  abstract fun addCharacteristicNotifiedListener(pigeon_instance: dev.hebei.bluetooth_low_energy_android.CentralManager, listener: dev.hebei.bluetooth_low_energy_android.CentralManager.CharacteristicNotifiedListener)

  abstract fun removeCharacteristicNotifiedListener(pigeon_instance: dev.hebei.bluetooth_low_energy_android.CentralManager, listener: dev.hebei.bluetooth_low_energy_android.CentralManager.CharacteristicNotifiedListener)

  abstract fun startDiscovery(pigeon_instance: dev.hebei.bluetooth_low_energy_android.CentralManager, serviceUUIDs: List<String>, callback: (Result<Unit>) -> Unit)

  abstract fun stopDiscovery(pigeon_instance: dev.hebei.bluetooth_low_energy_android.CentralManager)

  abstract fun retrieveConnectedPeripherals(pigeon_instance: dev.hebei.bluetooth_low_energy_android.CentralManager): List<dev.hebei.bluetooth_low_energy_android.Peripheral>

  abstract fun connect(pigeon_instance: dev.hebei.bluetooth_low_energy_android.CentralManager, peripheral: dev.hebei.bluetooth_low_energy_android.Peripheral, callback: (Result<Unit>) -> Unit)

  abstract fun disconnect(pigeon_instance: dev.hebei.bluetooth_low_energy_android.CentralManager, peripheral: dev.hebei.bluetooth_low_energy_android.Peripheral, callback: (Result<Unit>) -> Unit)

  abstract fun requestMTU(pigeon_instance: dev.hebei.bluetooth_low_energy_android.CentralManager, peripheral: dev.hebei.bluetooth_low_energy_android.Peripheral, mtu: Long, callback: (Result<Long>) -> Unit)

  abstract fun requestConnectionPriority(pigeon_instance: dev.hebei.bluetooth_low_energy_android.CentralManager, peripheral: dev.hebei.bluetooth_low_energy_android.Peripheral, priority: ConnectionPriorityApi)

  abstract fun getMaximumWriteLength(pigeon_instance: dev.hebei.bluetooth_low_energy_android.CentralManager, peripheral: dev.hebei.bluetooth_low_energy_android.Peripheral, type: GATTCharacteristicWriteTypeApi): Long

  abstract fun readRSSI(pigeon_instance: dev.hebei.bluetooth_low_energy_android.CentralManager, peripheral: dev.hebei.bluetooth_low_energy_android.Peripheral, callback: (Result<Long>) -> Unit)

  abstract fun discoverServices(pigeon_instance: dev.hebei.bluetooth_low_energy_android.CentralManager, peripheral: dev.hebei.bluetooth_low_energy_android.Peripheral, callback: (Result<List<dev.hebei.bluetooth_low_energy_android.GATTService>>) -> Unit)

  abstract fun readCharacteristic(pigeon_instance: dev.hebei.bluetooth_low_energy_android.CentralManager, characterisic: dev.hebei.bluetooth_low_energy_android.GATTCharacteristic, callback: (Result<ByteArray>) -> Unit)

  abstract fun writeCharacteristic(pigeon_instance: dev.hebei.bluetooth_low_energy_android.CentralManager, characterisic: dev.hebei.bluetooth_low_energy_android.GATTCharacteristic, value: ByteArray, type: GATTCharacteristicWriteTypeApi, callback: (Result<Unit>) -> Unit)

  abstract fun setCharacteristicNotifyState(pigeon_instance: dev.hebei.bluetooth_low_energy_android.CentralManager, characterisic: dev.hebei.bluetooth_low_energy_android.GATTCharacteristic, state: Boolean, callback: (Result<Unit>) -> Unit)

  abstract fun readDescriptor(pigeon_instance: dev.hebei.bluetooth_low_energy_android.CentralManager, descriptor: dev.hebei.bluetooth_low_energy_android.GATTDescriptor, callback: (Result<ByteArray>) -> Unit)

  abstract fun writeDescriptor(pigeon_instance: dev.hebei.bluetooth_low_energy_android.CentralManager, descriptor: dev.hebei.bluetooth_low_energy_android.GATTDescriptor, value: ByteArray, callback: (Result<Unit>) -> Unit)

  companion object {
    @Suppress("LocalVariableName")
    fun setUpMessageHandlers(binaryMessenger: BinaryMessenger, api: PigeonApiCentralManagerApi?) {
      val codec = api?.pigeonRegistrar?.codec ?: BluetoothLowEnergyAndroidApiPigeonCodec()
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.bluetooth_low_energy_android.CentralManagerApi.pigeon_defaultConstructor", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_identifierArg = args[0] as Long
            val wrapped: List<Any?> = try {
              api.pigeonRegistrar.instanceManager.addDartCreatedInstance(api.pigeon_defaultConstructor(), pigeon_identifierArg)
              listOf(null)
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.bluetooth_low_energy_android.CentralManagerApi.addDiscoveredListener", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as dev.hebei.bluetooth_low_energy_android.CentralManager
            val listenerArg = args[1] as dev.hebei.bluetooth_low_energy_android.CentralManager.DiscoveredListener
            val wrapped: List<Any?> = try {
              api.addDiscoveredListener(pigeon_instanceArg, listenerArg)
              listOf(null)
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.bluetooth_low_energy_android.CentralManagerApi.removeDiscoveredListener", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as dev.hebei.bluetooth_low_energy_android.CentralManager
            val listenerArg = args[1] as dev.hebei.bluetooth_low_energy_android.CentralManager.DiscoveredListener
            val wrapped: List<Any?> = try {
              api.removeDiscoveredListener(pigeon_instanceArg, listenerArg)
              listOf(null)
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.bluetooth_low_energy_android.CentralManagerApi.addConnectionStateChangedListener", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as dev.hebei.bluetooth_low_energy_android.CentralManager
            val listenerArg = args[1] as dev.hebei.bluetooth_low_energy_android.CentralManager.ConnectionStateChangedListener
            val wrapped: List<Any?> = try {
              api.addConnectionStateChangedListener(pigeon_instanceArg, listenerArg)
              listOf(null)
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.bluetooth_low_energy_android.CentralManagerApi.removeConnectionStateChangedListener", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as dev.hebei.bluetooth_low_energy_android.CentralManager
            val listenerArg = args[1] as dev.hebei.bluetooth_low_energy_android.CentralManager.ConnectionStateChangedListener
            val wrapped: List<Any?> = try {
              api.removeConnectionStateChangedListener(pigeon_instanceArg, listenerArg)
              listOf(null)
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.bluetooth_low_energy_android.CentralManagerApi.addMTUChanagedListener", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as dev.hebei.bluetooth_low_energy_android.CentralManager
            val listenerArg = args[1] as dev.hebei.bluetooth_low_energy_android.CentralManager.MTUChangedListener
            val wrapped: List<Any?> = try {
              api.addMTUChanagedListener(pigeon_instanceArg, listenerArg)
              listOf(null)
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.bluetooth_low_energy_android.CentralManagerApi.removeMTUChangedListener", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as dev.hebei.bluetooth_low_energy_android.CentralManager
            val listenerArg = args[1] as dev.hebei.bluetooth_low_energy_android.CentralManager.MTUChangedListener
            val wrapped: List<Any?> = try {
              api.removeMTUChangedListener(pigeon_instanceArg, listenerArg)
              listOf(null)
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.bluetooth_low_energy_android.CentralManagerApi.addCharacteristicNotifiedListener", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as dev.hebei.bluetooth_low_energy_android.CentralManager
            val listenerArg = args[1] as dev.hebei.bluetooth_low_energy_android.CentralManager.CharacteristicNotifiedListener
            val wrapped: List<Any?> = try {
              api.addCharacteristicNotifiedListener(pigeon_instanceArg, listenerArg)
              listOf(null)
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.bluetooth_low_energy_android.CentralManagerApi.removeCharacteristicNotifiedListener", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as dev.hebei.bluetooth_low_energy_android.CentralManager
            val listenerArg = args[1] as dev.hebei.bluetooth_low_energy_android.CentralManager.CharacteristicNotifiedListener
            val wrapped: List<Any?> = try {
              api.removeCharacteristicNotifiedListener(pigeon_instanceArg, listenerArg)
              listOf(null)
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.bluetooth_low_energy_android.CentralManagerApi.startDiscovery", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as dev.hebei.bluetooth_low_energy_android.CentralManager
            val serviceUUIDsArg = args[1] as List<String>
            api.startDiscovery(pigeon_instanceArg, serviceUUIDsArg) { result: Result<Unit> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                reply.reply(wrapResult(null))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.bluetooth_low_energy_android.CentralManagerApi.stopDiscovery", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as dev.hebei.bluetooth_low_energy_android.CentralManager
            val wrapped: List<Any?> = try {
              api.stopDiscovery(pigeon_instanceArg)
              listOf(null)
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.bluetooth_low_energy_android.CentralManagerApi.retrieveConnectedPeripherals", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as dev.hebei.bluetooth_low_energy_android.CentralManager
            val wrapped: List<Any?> = try {
              listOf(api.retrieveConnectedPeripherals(pigeon_instanceArg))
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.bluetooth_low_energy_android.CentralManagerApi.connect", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as dev.hebei.bluetooth_low_energy_android.CentralManager
            val peripheralArg = args[1] as dev.hebei.bluetooth_low_energy_android.Peripheral
            api.connect(pigeon_instanceArg, peripheralArg) { result: Result<Unit> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                reply.reply(wrapResult(null))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.bluetooth_low_energy_android.CentralManagerApi.disconnect", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as dev.hebei.bluetooth_low_energy_android.CentralManager
            val peripheralArg = args[1] as dev.hebei.bluetooth_low_energy_android.Peripheral
            api.disconnect(pigeon_instanceArg, peripheralArg) { result: Result<Unit> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                reply.reply(wrapResult(null))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.bluetooth_low_energy_android.CentralManagerApi.requestMTU", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as dev.hebei.bluetooth_low_energy_android.CentralManager
            val peripheralArg = args[1] as dev.hebei.bluetooth_low_energy_android.Peripheral
            val mtuArg = args[2] as Long
            api.requestMTU(pigeon_instanceArg, peripheralArg, mtuArg) { result: Result<Long> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.bluetooth_low_energy_android.CentralManagerApi.requestConnectionPriority", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as dev.hebei.bluetooth_low_energy_android.CentralManager
            val peripheralArg = args[1] as dev.hebei.bluetooth_low_energy_android.Peripheral
            val priorityArg = args[2] as ConnectionPriorityApi
            val wrapped: List<Any?> = try {
              api.requestConnectionPriority(pigeon_instanceArg, peripheralArg, priorityArg)
              listOf(null)
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.bluetooth_low_energy_android.CentralManagerApi.getMaximumWriteLength", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as dev.hebei.bluetooth_low_energy_android.CentralManager
            val peripheralArg = args[1] as dev.hebei.bluetooth_low_energy_android.Peripheral
            val typeArg = args[2] as GATTCharacteristicWriteTypeApi
            val wrapped: List<Any?> = try {
              listOf(api.getMaximumWriteLength(pigeon_instanceArg, peripheralArg, typeArg))
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.bluetooth_low_energy_android.CentralManagerApi.readRSSI", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as dev.hebei.bluetooth_low_energy_android.CentralManager
            val peripheralArg = args[1] as dev.hebei.bluetooth_low_energy_android.Peripheral
            api.readRSSI(pigeon_instanceArg, peripheralArg) { result: Result<Long> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.bluetooth_low_energy_android.CentralManagerApi.discoverServices", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as dev.hebei.bluetooth_low_energy_android.CentralManager
            val peripheralArg = args[1] as dev.hebei.bluetooth_low_energy_android.Peripheral
            api.discoverServices(pigeon_instanceArg, peripheralArg) { result: Result<List<dev.hebei.bluetooth_low_energy_android.GATTService>> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.bluetooth_low_energy_android.CentralManagerApi.readCharacteristic", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as dev.hebei.bluetooth_low_energy_android.CentralManager
            val characterisicArg = args[1] as dev.hebei.bluetooth_low_energy_android.GATTCharacteristic
            api.readCharacteristic(pigeon_instanceArg, characterisicArg) { result: Result<ByteArray> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.bluetooth_low_energy_android.CentralManagerApi.writeCharacteristic", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as dev.hebei.bluetooth_low_energy_android.CentralManager
            val characterisicArg = args[1] as dev.hebei.bluetooth_low_energy_android.GATTCharacteristic
            val valueArg = args[2] as ByteArray
            val typeArg = args[3] as GATTCharacteristicWriteTypeApi
            api.writeCharacteristic(pigeon_instanceArg, characterisicArg, valueArg, typeArg) { result: Result<Unit> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                reply.reply(wrapResult(null))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.bluetooth_low_energy_android.CentralManagerApi.setCharacteristicNotifyState", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as dev.hebei.bluetooth_low_energy_android.CentralManager
            val characterisicArg = args[1] as dev.hebei.bluetooth_low_energy_android.GATTCharacteristic
            val stateArg = args[2] as Boolean
            api.setCharacteristicNotifyState(pigeon_instanceArg, characterisicArg, stateArg) { result: Result<Unit> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                reply.reply(wrapResult(null))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.bluetooth_low_energy_android.CentralManagerApi.readDescriptor", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as dev.hebei.bluetooth_low_energy_android.CentralManager
            val descriptorArg = args[1] as dev.hebei.bluetooth_low_energy_android.GATTDescriptor
            api.readDescriptor(pigeon_instanceArg, descriptorArg) { result: Result<ByteArray> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.bluetooth_low_energy_android.CentralManagerApi.writeDescriptor", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as dev.hebei.bluetooth_low_energy_android.CentralManager
            val descriptorArg = args[1] as dev.hebei.bluetooth_low_energy_android.GATTDescriptor
            val valueArg = args[2] as ByteArray
            api.writeDescriptor(pigeon_instanceArg, descriptorArg, valueArg) { result: Result<Unit> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                reply.reply(wrapResult(null))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
    }
  }

  @Suppress("LocalVariableName", "FunctionName")
  /** Creates a Dart instance of CentralManagerApi and attaches it to [pigeon_instanceArg]. */
  fun pigeon_newInstance(pigeon_instanceArg: dev.hebei.bluetooth_low_energy_android.CentralManager, callback: (Result<Unit>) -> Unit)
{
    if (pigeonRegistrar.ignoreCallsToDart) {
      callback(
          Result.failure(
              BluetoothLowEnergyAndroidError("ignore-calls-error", "Calls to Dart are being ignored.", "")))
    }     else if (pigeonRegistrar.instanceManager.containsInstance(pigeon_instanceArg)) {
      callback(Result.success(Unit))
    }     else {
      val pigeon_identifierArg = pigeonRegistrar.instanceManager.addHostCreatedInstance(pigeon_instanceArg)
      val binaryMessenger = pigeonRegistrar.binaryMessenger
      val codec = pigeonRegistrar.codec
      val channelName = "dev.flutter.pigeon.bluetooth_low_energy_android.CentralManagerApi.pigeon_newInstance"
      val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
      channel.send(listOf(pigeon_identifierArg)) {
        if (it is List<*>) {
          if (it.size > 1) {
            callback(Result.failure(BluetoothLowEnergyAndroidError(it[0] as String, it[1] as String, it[2] as String?)))
          } else {
            callback(Result.success(Unit))
          }
        } else {
          callback(Result.failure(createConnectionError(channelName)))
        } 
      }
    }
  }

  @Suppress("FunctionName")
  /** An implementation of [PigeonApiBluetoothLowEnergyManagerApi] used to access callback methods */
  fun pigeon_getPigeonApiBluetoothLowEnergyManagerApi(): PigeonApiBluetoothLowEnergyManagerApi
  {
    return pigeonRegistrar.getPigeonApiBluetoothLowEnergyManagerApi()
  }

}
@Suppress("UNCHECKED_CAST")
abstract class PigeonApiDiscoveredListenerApi(open val pigeonRegistrar: BluetoothLowEnergyAndroidApiPigeonProxyApiRegistrar) {
  abstract fun pigeon_defaultConstructor(): dev.hebei.bluetooth_low_energy_android.CentralManager.DiscoveredListener

  companion object {
    @Suppress("LocalVariableName")
    fun setUpMessageHandlers(binaryMessenger: BinaryMessenger, api: PigeonApiDiscoveredListenerApi?) {
      val codec = api?.pigeonRegistrar?.codec ?: BluetoothLowEnergyAndroidApiPigeonCodec()
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.bluetooth_low_energy_android.DiscoveredListenerApi.pigeon_defaultConstructor", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_identifierArg = args[0] as Long
            val wrapped: List<Any?> = try {
              api.pigeonRegistrar.instanceManager.addDartCreatedInstance(api.pigeon_defaultConstructor(), pigeon_identifierArg)
              listOf(null)
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
    }
  }

  @Suppress("LocalVariableName", "FunctionName")
  /** Creates a Dart instance of DiscoveredListenerApi and attaches it to [pigeon_instanceArg]. */
  fun pigeon_newInstance(pigeon_instanceArg: dev.hebei.bluetooth_low_energy_android.CentralManager.DiscoveredListener, callback: (Result<Unit>) -> Unit)
{
    if (pigeonRegistrar.ignoreCallsToDart) {
      callback(
          Result.failure(
              BluetoothLowEnergyAndroidError("ignore-calls-error", "Calls to Dart are being ignored.", "")))
    }     else if (pigeonRegistrar.instanceManager.containsInstance(pigeon_instanceArg)) {
      callback(Result.success(Unit))
    }     else {
      callback(
          Result.failure(
              BluetoothLowEnergyAndroidError("new-instance-error", "Attempting to create a new Dart instance of DiscoveredListenerApi, but the class has a nonnull callback method.", "")))
    }
  }

  fun onDiscovered(pigeon_instanceArg: dev.hebei.bluetooth_low_energy_android.CentralManager.DiscoveredListener, peripheralArg: dev.hebei.bluetooth_low_energy_android.Peripheral, rssiArg: Long, advertisementArg: ByteArray, callback: (Result<Unit>) -> Unit)
{
    if (pigeonRegistrar.ignoreCallsToDart) {
      callback(
          Result.failure(
              BluetoothLowEnergyAndroidError("ignore-calls-error", "Calls to Dart are being ignored.", "")))
      return
    }
    val binaryMessenger = pigeonRegistrar.binaryMessenger
    val codec = pigeonRegistrar.codec
    val channelName = "dev.flutter.pigeon.bluetooth_low_energy_android.DiscoveredListenerApi.onDiscovered"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(pigeon_instanceArg, peripheralArg, rssiArg, advertisementArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(BluetoothLowEnergyAndroidError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(createConnectionError(channelName)))
      } 
    }
  }

}
@Suppress("UNCHECKED_CAST")
abstract class PigeonApiConnectionStateChangedListenerApi(open val pigeonRegistrar: BluetoothLowEnergyAndroidApiPigeonProxyApiRegistrar) {
  abstract fun pigeon_defaultConstructor(): dev.hebei.bluetooth_low_energy_android.CentralManager.ConnectionStateChangedListener

  companion object {
    @Suppress("LocalVariableName")
    fun setUpMessageHandlers(binaryMessenger: BinaryMessenger, api: PigeonApiConnectionStateChangedListenerApi?) {
      val codec = api?.pigeonRegistrar?.codec ?: BluetoothLowEnergyAndroidApiPigeonCodec()
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.bluetooth_low_energy_android.ConnectionStateChangedListenerApi.pigeon_defaultConstructor", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_identifierArg = args[0] as Long
            val wrapped: List<Any?> = try {
              api.pigeonRegistrar.instanceManager.addDartCreatedInstance(api.pigeon_defaultConstructor(), pigeon_identifierArg)
              listOf(null)
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
    }
  }

  @Suppress("LocalVariableName", "FunctionName")
  /** Creates a Dart instance of ConnectionStateChangedListenerApi and attaches it to [pigeon_instanceArg]. */
  fun pigeon_newInstance(pigeon_instanceArg: dev.hebei.bluetooth_low_energy_android.CentralManager.ConnectionStateChangedListener, callback: (Result<Unit>) -> Unit)
{
    if (pigeonRegistrar.ignoreCallsToDart) {
      callback(
          Result.failure(
              BluetoothLowEnergyAndroidError("ignore-calls-error", "Calls to Dart are being ignored.", "")))
    }     else if (pigeonRegistrar.instanceManager.containsInstance(pigeon_instanceArg)) {
      callback(Result.success(Unit))
    }     else {
      callback(
          Result.failure(
              BluetoothLowEnergyAndroidError("new-instance-error", "Attempting to create a new Dart instance of ConnectionStateChangedListenerApi, but the class has a nonnull callback method.", "")))
    }
  }

  fun onChanged(pigeon_instanceArg: dev.hebei.bluetooth_low_energy_android.CentralManager.ConnectionStateChangedListener, peripheralArg: dev.hebei.bluetooth_low_energy_android.Peripheral, stateArg: ConnectionStateApi, callback: (Result<Unit>) -> Unit)
{
    if (pigeonRegistrar.ignoreCallsToDart) {
      callback(
          Result.failure(
              BluetoothLowEnergyAndroidError("ignore-calls-error", "Calls to Dart are being ignored.", "")))
      return
    }
    val binaryMessenger = pigeonRegistrar.binaryMessenger
    val codec = pigeonRegistrar.codec
    val channelName = "dev.flutter.pigeon.bluetooth_low_energy_android.ConnectionStateChangedListenerApi.onChanged"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(pigeon_instanceArg, peripheralArg, stateArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(BluetoothLowEnergyAndroidError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(createConnectionError(channelName)))
      } 
    }
  }

}
@Suppress("UNCHECKED_CAST")
abstract class PigeonApiMTUChangedListenerApi(open val pigeonRegistrar: BluetoothLowEnergyAndroidApiPigeonProxyApiRegistrar) {
  abstract fun pigeon_defaultConstructor(): dev.hebei.bluetooth_low_energy_android.CentralManager.MTUChangedListener

  companion object {
    @Suppress("LocalVariableName")
    fun setUpMessageHandlers(binaryMessenger: BinaryMessenger, api: PigeonApiMTUChangedListenerApi?) {
      val codec = api?.pigeonRegistrar?.codec ?: BluetoothLowEnergyAndroidApiPigeonCodec()
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.bluetooth_low_energy_android.MTUChangedListenerApi.pigeon_defaultConstructor", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_identifierArg = args[0] as Long
            val wrapped: List<Any?> = try {
              api.pigeonRegistrar.instanceManager.addDartCreatedInstance(api.pigeon_defaultConstructor(), pigeon_identifierArg)
              listOf(null)
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
    }
  }

  @Suppress("LocalVariableName", "FunctionName")
  /** Creates a Dart instance of MTUChangedListenerApi and attaches it to [pigeon_instanceArg]. */
  fun pigeon_newInstance(pigeon_instanceArg: dev.hebei.bluetooth_low_energy_android.CentralManager.MTUChangedListener, callback: (Result<Unit>) -> Unit)
{
    if (pigeonRegistrar.ignoreCallsToDart) {
      callback(
          Result.failure(
              BluetoothLowEnergyAndroidError("ignore-calls-error", "Calls to Dart are being ignored.", "")))
    }     else if (pigeonRegistrar.instanceManager.containsInstance(pigeon_instanceArg)) {
      callback(Result.success(Unit))
    }     else {
      callback(
          Result.failure(
              BluetoothLowEnergyAndroidError("new-instance-error", "Attempting to create a new Dart instance of MTUChangedListenerApi, but the class has a nonnull callback method.", "")))
    }
  }

  fun onChanged(pigeon_instanceArg: dev.hebei.bluetooth_low_energy_android.CentralManager.MTUChangedListener, peripheralArg: dev.hebei.bluetooth_low_energy_android.Peripheral, mtuArg: Long, callback: (Result<Unit>) -> Unit)
{
    if (pigeonRegistrar.ignoreCallsToDart) {
      callback(
          Result.failure(
              BluetoothLowEnergyAndroidError("ignore-calls-error", "Calls to Dart are being ignored.", "")))
      return
    }
    val binaryMessenger = pigeonRegistrar.binaryMessenger
    val codec = pigeonRegistrar.codec
    val channelName = "dev.flutter.pigeon.bluetooth_low_energy_android.MTUChangedListenerApi.onChanged"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(pigeon_instanceArg, peripheralArg, mtuArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(BluetoothLowEnergyAndroidError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(createConnectionError(channelName)))
      } 
    }
  }

}
@Suppress("UNCHECKED_CAST")
abstract class PigeonApiCharacteristicNotifiedListenerApi(open val pigeonRegistrar: BluetoothLowEnergyAndroidApiPigeonProxyApiRegistrar) {
  abstract fun pigeon_defaultConstructor(): dev.hebei.bluetooth_low_energy_android.CentralManager.CharacteristicNotifiedListener

  companion object {
    @Suppress("LocalVariableName")
    fun setUpMessageHandlers(binaryMessenger: BinaryMessenger, api: PigeonApiCharacteristicNotifiedListenerApi?) {
      val codec = api?.pigeonRegistrar?.codec ?: BluetoothLowEnergyAndroidApiPigeonCodec()
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.bluetooth_low_energy_android.CharacteristicNotifiedListenerApi.pigeon_defaultConstructor", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_identifierArg = args[0] as Long
            val wrapped: List<Any?> = try {
              api.pigeonRegistrar.instanceManager.addDartCreatedInstance(api.pigeon_defaultConstructor(), pigeon_identifierArg)
              listOf(null)
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
    }
  }

  @Suppress("LocalVariableName", "FunctionName")
  /** Creates a Dart instance of CharacteristicNotifiedListenerApi and attaches it to [pigeon_instanceArg]. */
  fun pigeon_newInstance(pigeon_instanceArg: dev.hebei.bluetooth_low_energy_android.CentralManager.CharacteristicNotifiedListener, callback: (Result<Unit>) -> Unit)
{
    if (pigeonRegistrar.ignoreCallsToDart) {
      callback(
          Result.failure(
              BluetoothLowEnergyAndroidError("ignore-calls-error", "Calls to Dart are being ignored.", "")))
    }     else if (pigeonRegistrar.instanceManager.containsInstance(pigeon_instanceArg)) {
      callback(Result.success(Unit))
    }     else {
      callback(
          Result.failure(
              BluetoothLowEnergyAndroidError("new-instance-error", "Attempting to create a new Dart instance of CharacteristicNotifiedListenerApi, but the class has a nonnull callback method.", "")))
    }
  }

  fun onNotified(pigeon_instanceArg: dev.hebei.bluetooth_low_energy_android.CentralManager.CharacteristicNotifiedListener, characteristicArg: dev.hebei.bluetooth_low_energy_android.GATTCharacteristic, valueArg: ByteArray, callback: (Result<Unit>) -> Unit)
{
    if (pigeonRegistrar.ignoreCallsToDart) {
      callback(
          Result.failure(
              BluetoothLowEnergyAndroidError("ignore-calls-error", "Calls to Dart are being ignored.", "")))
      return
    }
    val binaryMessenger = pigeonRegistrar.binaryMessenger
    val codec = pigeonRegistrar.codec
    val channelName = "dev.flutter.pigeon.bluetooth_low_energy_android.CharacteristicNotifiedListenerApi.onNotified"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(pigeon_instanceArg, characteristicArg, valueArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(BluetoothLowEnergyAndroidError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(createConnectionError(channelName)))
      } 
    }
  }

}
@Suppress("UNCHECKED_CAST")
abstract class PigeonApiBluetoothLowEnergyPeerApi(open val pigeonRegistrar: BluetoothLowEnergyAndroidApiPigeonProxyApiRegistrar) {
  abstract fun getAddress(pigeon_instance: dev.hebei.bluetooth_low_energy_android.BluetoothLowEnergyPeer): String

  companion object {
    @Suppress("LocalVariableName")
    fun setUpMessageHandlers(binaryMessenger: BinaryMessenger, api: PigeonApiBluetoothLowEnergyPeerApi?) {
      val codec = api?.pigeonRegistrar?.codec ?: BluetoothLowEnergyAndroidApiPigeonCodec()
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.bluetooth_low_energy_android.BluetoothLowEnergyPeerApi.getAddress", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as dev.hebei.bluetooth_low_energy_android.BluetoothLowEnergyPeer
            val wrapped: List<Any?> = try {
              listOf(api.getAddress(pigeon_instanceArg))
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
    }
  }

  @Suppress("LocalVariableName", "FunctionName")
  /** Creates a Dart instance of BluetoothLowEnergyPeerApi and attaches it to [pigeon_instanceArg]. */
  fun pigeon_newInstance(pigeon_instanceArg: dev.hebei.bluetooth_low_energy_android.BluetoothLowEnergyPeer, callback: (Result<Unit>) -> Unit)
{
    if (pigeonRegistrar.ignoreCallsToDart) {
      callback(
          Result.failure(
              BluetoothLowEnergyAndroidError("ignore-calls-error", "Calls to Dart are being ignored.", "")))
    }     else if (pigeonRegistrar.instanceManager.containsInstance(pigeon_instanceArg)) {
      callback(Result.success(Unit))
    }     else {
      val pigeon_identifierArg = pigeonRegistrar.instanceManager.addHostCreatedInstance(pigeon_instanceArg)
      val binaryMessenger = pigeonRegistrar.binaryMessenger
      val codec = pigeonRegistrar.codec
      val channelName = "dev.flutter.pigeon.bluetooth_low_energy_android.BluetoothLowEnergyPeerApi.pigeon_newInstance"
      val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
      channel.send(listOf(pigeon_identifierArg)) {
        if (it is List<*>) {
          if (it.size > 1) {
            callback(Result.failure(BluetoothLowEnergyAndroidError(it[0] as String, it[1] as String, it[2] as String?)))
          } else {
            callback(Result.success(Unit))
          }
        } else {
          callback(Result.failure(createConnectionError(channelName)))
        } 
      }
    }
  }

}
@Suppress("UNCHECKED_CAST")
open class PigeonApiPeripheralApi(open val pigeonRegistrar: BluetoothLowEnergyAndroidApiPigeonProxyApiRegistrar) {
  @Suppress("LocalVariableName", "FunctionName")
  /** Creates a Dart instance of PeripheralApi and attaches it to [pigeon_instanceArg]. */
  fun pigeon_newInstance(pigeon_instanceArg: dev.hebei.bluetooth_low_energy_android.Peripheral, callback: (Result<Unit>) -> Unit)
{
    if (pigeonRegistrar.ignoreCallsToDart) {
      callback(
          Result.failure(
              BluetoothLowEnergyAndroidError("ignore-calls-error", "Calls to Dart are being ignored.", "")))
    }     else if (pigeonRegistrar.instanceManager.containsInstance(pigeon_instanceArg)) {
      callback(Result.success(Unit))
    }     else {
      val pigeon_identifierArg = pigeonRegistrar.instanceManager.addHostCreatedInstance(pigeon_instanceArg)
      val binaryMessenger = pigeonRegistrar.binaryMessenger
      val codec = pigeonRegistrar.codec
      val channelName = "dev.flutter.pigeon.bluetooth_low_energy_android.PeripheralApi.pigeon_newInstance"
      val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
      channel.send(listOf(pigeon_identifierArg)) {
        if (it is List<*>) {
          if (it.size > 1) {
            callback(Result.failure(BluetoothLowEnergyAndroidError(it[0] as String, it[1] as String, it[2] as String?)))
          } else {
            callback(Result.success(Unit))
          }
        } else {
          callback(Result.failure(createConnectionError(channelName)))
        } 
      }
    }
  }

  @Suppress("FunctionName")
  /** An implementation of [PigeonApiBluetoothLowEnergyPeerApi] used to access callback methods */
  fun pigeon_getPigeonApiBluetoothLowEnergyPeerApi(): PigeonApiBluetoothLowEnergyPeerApi
  {
    return pigeonRegistrar.getPigeonApiBluetoothLowEnergyPeerApi()
  }

}
@Suppress("UNCHECKED_CAST")
abstract class PigeonApiGATTAttributeApi(open val pigeonRegistrar: BluetoothLowEnergyAndroidApiPigeonProxyApiRegistrar) {
  abstract fun getUUID(pigeon_instance: dev.hebei.bluetooth_low_energy_android.GATTAttribute): String

  abstract fun getInstanceId(pigeon_instance: dev.hebei.bluetooth_low_energy_android.GATTAttribute): Long

  companion object {
    @Suppress("LocalVariableName")
    fun setUpMessageHandlers(binaryMessenger: BinaryMessenger, api: PigeonApiGATTAttributeApi?) {
      val codec = api?.pigeonRegistrar?.codec ?: BluetoothLowEnergyAndroidApiPigeonCodec()
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.bluetooth_low_energy_android.GATTAttributeApi.getUUID", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as dev.hebei.bluetooth_low_energy_android.GATTAttribute
            val wrapped: List<Any?> = try {
              listOf(api.getUUID(pigeon_instanceArg))
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.bluetooth_low_energy_android.GATTAttributeApi.getInstanceId", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as dev.hebei.bluetooth_low_energy_android.GATTAttribute
            val wrapped: List<Any?> = try {
              listOf(api.getInstanceId(pigeon_instanceArg))
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
    }
  }

  @Suppress("LocalVariableName", "FunctionName")
  /** Creates a Dart instance of GATTAttributeApi and attaches it to [pigeon_instanceArg]. */
  fun pigeon_newInstance(pigeon_instanceArg: dev.hebei.bluetooth_low_energy_android.GATTAttribute, callback: (Result<Unit>) -> Unit)
{
    if (pigeonRegistrar.ignoreCallsToDart) {
      callback(
          Result.failure(
              BluetoothLowEnergyAndroidError("ignore-calls-error", "Calls to Dart are being ignored.", "")))
    }     else if (pigeonRegistrar.instanceManager.containsInstance(pigeon_instanceArg)) {
      callback(Result.success(Unit))
    }     else {
      val pigeon_identifierArg = pigeonRegistrar.instanceManager.addHostCreatedInstance(pigeon_instanceArg)
      val binaryMessenger = pigeonRegistrar.binaryMessenger
      val codec = pigeonRegistrar.codec
      val channelName = "dev.flutter.pigeon.bluetooth_low_energy_android.GATTAttributeApi.pigeon_newInstance"
      val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
      channel.send(listOf(pigeon_identifierArg)) {
        if (it is List<*>) {
          if (it.size > 1) {
            callback(Result.failure(BluetoothLowEnergyAndroidError(it[0] as String, it[1] as String, it[2] as String?)))
          } else {
            callback(Result.success(Unit))
          }
        } else {
          callback(Result.failure(createConnectionError(channelName)))
        } 
      }
    }
  }

}
@Suppress("UNCHECKED_CAST")
open class PigeonApiGATTDescriptorApi(open val pigeonRegistrar: BluetoothLowEnergyAndroidApiPigeonProxyApiRegistrar) {
  @Suppress("LocalVariableName", "FunctionName")
  /** Creates a Dart instance of GATTDescriptorApi and attaches it to [pigeon_instanceArg]. */
  fun pigeon_newInstance(pigeon_instanceArg: dev.hebei.bluetooth_low_energy_android.GATTDescriptor, callback: (Result<Unit>) -> Unit)
{
    if (pigeonRegistrar.ignoreCallsToDart) {
      callback(
          Result.failure(
              BluetoothLowEnergyAndroidError("ignore-calls-error", "Calls to Dart are being ignored.", "")))
    }     else if (pigeonRegistrar.instanceManager.containsInstance(pigeon_instanceArg)) {
      callback(Result.success(Unit))
    }     else {
      val pigeon_identifierArg = pigeonRegistrar.instanceManager.addHostCreatedInstance(pigeon_instanceArg)
      val binaryMessenger = pigeonRegistrar.binaryMessenger
      val codec = pigeonRegistrar.codec
      val channelName = "dev.flutter.pigeon.bluetooth_low_energy_android.GATTDescriptorApi.pigeon_newInstance"
      val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
      channel.send(listOf(pigeon_identifierArg)) {
        if (it is List<*>) {
          if (it.size > 1) {
            callback(Result.failure(BluetoothLowEnergyAndroidError(it[0] as String, it[1] as String, it[2] as String?)))
          } else {
            callback(Result.success(Unit))
          }
        } else {
          callback(Result.failure(createConnectionError(channelName)))
        } 
      }
    }
  }

  @Suppress("FunctionName")
  /** An implementation of [PigeonApiGATTAttributeApi] used to access callback methods */
  fun pigeon_getPigeonApiGATTAttributeApi(): PigeonApiGATTAttributeApi
  {
    return pigeonRegistrar.getPigeonApiGATTAttributeApi()
  }

}
@Suppress("UNCHECKED_CAST")
abstract class PigeonApiGATTCharacteristicApi(open val pigeonRegistrar: BluetoothLowEnergyAndroidApiPigeonProxyApiRegistrar) {
  abstract fun getProperties(pigeon_instance: dev.hebei.bluetooth_low_energy_android.GATTCharacteristic): List<GATTCharacteristicPropertyApi>

  abstract fun getDescriptors(pigeon_instance: dev.hebei.bluetooth_low_energy_android.GATTCharacteristic): List<dev.hebei.bluetooth_low_energy_android.GATTDescriptor>

  companion object {
    @Suppress("LocalVariableName")
    fun setUpMessageHandlers(binaryMessenger: BinaryMessenger, api: PigeonApiGATTCharacteristicApi?) {
      val codec = api?.pigeonRegistrar?.codec ?: BluetoothLowEnergyAndroidApiPigeonCodec()
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.bluetooth_low_energy_android.GATTCharacteristicApi.getProperties", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as dev.hebei.bluetooth_low_energy_android.GATTCharacteristic
            val wrapped: List<Any?> = try {
              listOf(api.getProperties(pigeon_instanceArg))
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.bluetooth_low_energy_android.GATTCharacteristicApi.getDescriptors", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as dev.hebei.bluetooth_low_energy_android.GATTCharacteristic
            val wrapped: List<Any?> = try {
              listOf(api.getDescriptors(pigeon_instanceArg))
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
    }
  }

  @Suppress("LocalVariableName", "FunctionName")
  /** Creates a Dart instance of GATTCharacteristicApi and attaches it to [pigeon_instanceArg]. */
  fun pigeon_newInstance(pigeon_instanceArg: dev.hebei.bluetooth_low_energy_android.GATTCharacteristic, callback: (Result<Unit>) -> Unit)
{
    if (pigeonRegistrar.ignoreCallsToDart) {
      callback(
          Result.failure(
              BluetoothLowEnergyAndroidError("ignore-calls-error", "Calls to Dart are being ignored.", "")))
    }     else if (pigeonRegistrar.instanceManager.containsInstance(pigeon_instanceArg)) {
      callback(Result.success(Unit))
    }     else {
      val pigeon_identifierArg = pigeonRegistrar.instanceManager.addHostCreatedInstance(pigeon_instanceArg)
      val binaryMessenger = pigeonRegistrar.binaryMessenger
      val codec = pigeonRegistrar.codec
      val channelName = "dev.flutter.pigeon.bluetooth_low_energy_android.GATTCharacteristicApi.pigeon_newInstance"
      val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
      channel.send(listOf(pigeon_identifierArg)) {
        if (it is List<*>) {
          if (it.size > 1) {
            callback(Result.failure(BluetoothLowEnergyAndroidError(it[0] as String, it[1] as String, it[2] as String?)))
          } else {
            callback(Result.success(Unit))
          }
        } else {
          callback(Result.failure(createConnectionError(channelName)))
        } 
      }
    }
  }

  @Suppress("FunctionName")
  /** An implementation of [PigeonApiGATTAttributeApi] used to access callback methods */
  fun pigeon_getPigeonApiGATTAttributeApi(): PigeonApiGATTAttributeApi
  {
    return pigeonRegistrar.getPigeonApiGATTAttributeApi()
  }

}
@Suppress("UNCHECKED_CAST")
abstract class PigeonApiGATTServiceApi(open val pigeonRegistrar: BluetoothLowEnergyAndroidApiPigeonProxyApiRegistrar) {
  abstract fun getIsPrimary(pigeon_instance: dev.hebei.bluetooth_low_energy_android.GATTService): Boolean

  abstract fun getIncludedServices(pigeon_instance: dev.hebei.bluetooth_low_energy_android.GATTService): List<dev.hebei.bluetooth_low_energy_android.GATTService>

  abstract fun getCharacteristics(pigeon_instance: dev.hebei.bluetooth_low_energy_android.GATTService): List<dev.hebei.bluetooth_low_energy_android.GATTCharacteristic>

  companion object {
    @Suppress("LocalVariableName")
    fun setUpMessageHandlers(binaryMessenger: BinaryMessenger, api: PigeonApiGATTServiceApi?) {
      val codec = api?.pigeonRegistrar?.codec ?: BluetoothLowEnergyAndroidApiPigeonCodec()
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.bluetooth_low_energy_android.GATTServiceApi.getIsPrimary", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as dev.hebei.bluetooth_low_energy_android.GATTService
            val wrapped: List<Any?> = try {
              listOf(api.getIsPrimary(pigeon_instanceArg))
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.bluetooth_low_energy_android.GATTServiceApi.getIncludedServices", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as dev.hebei.bluetooth_low_energy_android.GATTService
            val wrapped: List<Any?> = try {
              listOf(api.getIncludedServices(pigeon_instanceArg))
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.bluetooth_low_energy_android.GATTServiceApi.getCharacteristics", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as dev.hebei.bluetooth_low_energy_android.GATTService
            val wrapped: List<Any?> = try {
              listOf(api.getCharacteristics(pigeon_instanceArg))
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
    }
  }

  @Suppress("LocalVariableName", "FunctionName")
  /** Creates a Dart instance of GATTServiceApi and attaches it to [pigeon_instanceArg]. */
  fun pigeon_newInstance(pigeon_instanceArg: dev.hebei.bluetooth_low_energy_android.GATTService, callback: (Result<Unit>) -> Unit)
{
    if (pigeonRegistrar.ignoreCallsToDart) {
      callback(
          Result.failure(
              BluetoothLowEnergyAndroidError("ignore-calls-error", "Calls to Dart are being ignored.", "")))
    }     else if (pigeonRegistrar.instanceManager.containsInstance(pigeon_instanceArg)) {
      callback(Result.success(Unit))
    }     else {
      val pigeon_identifierArg = pigeonRegistrar.instanceManager.addHostCreatedInstance(pigeon_instanceArg)
      val binaryMessenger = pigeonRegistrar.binaryMessenger
      val codec = pigeonRegistrar.codec
      val channelName = "dev.flutter.pigeon.bluetooth_low_energy_android.GATTServiceApi.pigeon_newInstance"
      val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
      channel.send(listOf(pigeon_identifierArg)) {
        if (it is List<*>) {
          if (it.size > 1) {
            callback(Result.failure(BluetoothLowEnergyAndroidError(it[0] as String, it[1] as String, it[2] as String?)))
          } else {
            callback(Result.success(Unit))
          }
        } else {
          callback(Result.failure(createConnectionError(channelName)))
        } 
      }
    }
  }

  @Suppress("FunctionName")
  /** An implementation of [PigeonApiGATTAttributeApi] used to access callback methods */
  fun pigeon_getPigeonApiGATTAttributeApi(): PigeonApiGATTAttributeApi
  {
    return pigeonRegistrar.getPigeonApiGATTAttributeApi()
  }

}
