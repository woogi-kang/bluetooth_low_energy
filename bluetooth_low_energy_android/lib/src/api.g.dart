// Autogenerated from Pigeon (v25.1.0), do not edit directly.
// See also: https://pub.dev/packages/pigeon
// ignore_for_file: public_member_api_docs, non_constant_identifier_names, avoid_as, unused_import, unnecessary_parenthesis, prefer_null_aware_operators, omit_local_variable_types, unused_shown_name, unnecessary_import, no_leading_underscores_for_local_identifiers

import 'dart:async';
import 'dart:typed_data' show Float64List, Int32List, Int64List, Uint8List;

import 'package:flutter/foundation.dart' show ReadBuffer, WriteBuffer;
import 'package:flutter/services.dart';

PlatformException _createConnectionError(String channelName) {
  return PlatformException(
    code: 'channel-error',
    message: 'Unable to establish connection on channel: "$channelName".',
  );
}

List<Object?> wrapResponse({Object? result, PlatformException? error, bool empty = false}) {
  if (empty) {
    return <Object?>[];
  }
  if (error == null) {
    return <Object?>[result];
  }
  return <Object?>[error.code, error.message, error.details];
}
bool _deepEquals(Object? a, Object? b) {
  if (a is List && b is List) {
    return a.length == b.length &&
        a.indexed
        .every(((int, dynamic) item) => _deepEquals(item.$2, b[item.$1]));
  }
  if (a is Map && b is Map) {
    final Iterable<Object?> keys = (a as Map<Object?, Object?>).keys;
    return a.length == b.length && keys.every((Object? key) =>
        (b as Map<Object?, Object?>).containsKey(key) &&
        _deepEquals(a[key], b[key]));
  }
  return a == b;
}
    

enum BluetoothLowEnergyStateApi {
  unknown,
  unsupported,
  unauthorized,
  off,
  turningOn,
  on,
  turningOff,
}

enum ConnectionStateApi {
  disconnected,
  connecting,
  connected,
  disconnecting,
}

enum ConnectionPriorityApi {
  balanced,
  high,
  lowPower,
  dck,
}

enum GATTPermissionApi {
  read,
  readEncrypted,
  write,
  writeEncrypted,
}

enum GATTCharacteristicPropertyApi {
  read,
  write,
  writeWithoutResponse,
  notify,
  indicate,
}

enum GATTCharacteristicWriteTypeApi {
  withResponse,
  withoutResponse,
}

enum GATTErrorApi {
  success,
  readNotPermitted,
  writeNotPermitted,
  insufficientAuthentication,
  requestNotSupported,
  insufficientEncryption,
  invalidOffset,
  insufficientAuthorization,
  invalidAttributeLength,
  connectionCongested,
  failure,
}

class PeripheralApi {
  PeripheralApi({
    required this.address,
  });

  String address;

  List<Object?> _toList() {
    return <Object?>[
      address,
    ];
  }

  Object encode() {
    return _toList();  }

  static PeripheralApi decode(Object result) {
    result as List<Object?>;
    return PeripheralApi(
      address: result[0]! as String,
    );
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  bool operator ==(Object other) {
    if (other is! PeripheralApi || other.runtimeType != runtimeType) {
      return false;
    }
    if (identical(this, other)) {
      return true;
    }
    return 
      address == other.address;
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  int get hashCode => Object.hashAll(_toList())
;
}

class CentralApi {
  CentralApi({
    required this.address,
  });

  String address;

  List<Object?> _toList() {
    return <Object?>[
      address,
    ];
  }

  Object encode() {
    return _toList();  }

  static CentralApi decode(Object result) {
    result as List<Object?>;
    return CentralApi(
      address: result[0]! as String,
    );
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  bool operator ==(Object other) {
    if (other is! CentralApi || other.runtimeType != runtimeType) {
      return false;
    }
    if (identical(this, other)) {
      return true;
    }
    return 
      address == other.address;
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  int get hashCode => Object.hashAll(_toList())
;
}

class ManufacturerSpecificDataApi {
  ManufacturerSpecificDataApi({
    required this.id,
    required this.data,
  });

  int id;

  Uint8List data;

  List<Object?> _toList() {
    return <Object?>[
      id,
      data,
    ];
  }

  Object encode() {
    return _toList();  }

  static ManufacturerSpecificDataApi decode(Object result) {
    result as List<Object?>;
    return ManufacturerSpecificDataApi(
      id: result[0]! as int,
      data: result[1]! as Uint8List,
    );
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  bool operator ==(Object other) {
    if (other is! ManufacturerSpecificDataApi || other.runtimeType != runtimeType) {
      return false;
    }
    if (identical(this, other)) {
      return true;
    }
    return 
      id == other.id
      && _deepEquals(data, other.data);
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  int get hashCode => Object.hashAll(_toList())
;
}

class AdvertisementApi {
  AdvertisementApi({
    this.name,
    required this.serviceUUIDs,
    required this.serviceData,
    required this.manufacturerSpecificData,
  });

  String? name;

  List<String> serviceUUIDs;

  Map<String, Uint8List> serviceData;

  List<ManufacturerSpecificDataApi> manufacturerSpecificData;

  List<Object?> _toList() {
    return <Object?>[
      name,
      serviceUUIDs,
      serviceData,
      manufacturerSpecificData,
    ];
  }

  Object encode() {
    return _toList();  }

  static AdvertisementApi decode(Object result) {
    result as List<Object?>;
    return AdvertisementApi(
      name: result[0] as String?,
      serviceUUIDs: (result[1] as List<Object?>?)!.cast<String>(),
      serviceData: (result[2] as Map<Object?, Object?>?)!.cast<String, Uint8List>(),
      manufacturerSpecificData: (result[3] as List<Object?>?)!.cast<ManufacturerSpecificDataApi>(),
    );
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  bool operator ==(Object other) {
    if (other is! AdvertisementApi || other.runtimeType != runtimeType) {
      return false;
    }
    if (identical(this, other)) {
      return true;
    }
    return 
      name == other.name
      && _deepEquals(serviceUUIDs, other.serviceUUIDs)
      && _deepEquals(serviceData, other.serviceData)
      && _deepEquals(manufacturerSpecificData, other.manufacturerSpecificData);
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  int get hashCode => Object.hashAll(_toList())
;
}

class GATTDescriptorApi {
  GATTDescriptorApi({
    required this.id,
    required this.uuid,
  });

  int id;

  String uuid;

  List<Object?> _toList() {
    return <Object?>[
      id,
      uuid,
    ];
  }

  Object encode() {
    return _toList();  }

  static GATTDescriptorApi decode(Object result) {
    result as List<Object?>;
    return GATTDescriptorApi(
      id: result[0]! as int,
      uuid: result[1]! as String,
    );
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  bool operator ==(Object other) {
    if (other is! GATTDescriptorApi || other.runtimeType != runtimeType) {
      return false;
    }
    if (identical(this, other)) {
      return true;
    }
    return 
      id == other.id
      && uuid == other.uuid;
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  int get hashCode => Object.hashAll(_toList())
;
}

class GATTCharacteristicApi {
  GATTCharacteristicApi({
    required this.id,
    required this.uuid,
    required this.properties,
    required this.descriptors,
  });

  int id;

  String uuid;

  List<GATTCharacteristicPropertyApi> properties;

  List<GATTDescriptorApi> descriptors;

  List<Object?> _toList() {
    return <Object?>[
      id,
      uuid,
      properties,
      descriptors,
    ];
  }

  Object encode() {
    return _toList();  }

  static GATTCharacteristicApi decode(Object result) {
    result as List<Object?>;
    return GATTCharacteristicApi(
      id: result[0]! as int,
      uuid: result[1]! as String,
      properties: (result[2] as List<Object?>?)!.cast<GATTCharacteristicPropertyApi>(),
      descriptors: (result[3] as List<Object?>?)!.cast<GATTDescriptorApi>(),
    );
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  bool operator ==(Object other) {
    if (other is! GATTCharacteristicApi || other.runtimeType != runtimeType) {
      return false;
    }
    if (identical(this, other)) {
      return true;
    }
    return 
      id == other.id
      && uuid == other.uuid
      && _deepEquals(properties, other.properties)
      && _deepEquals(descriptors, other.descriptors);
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  int get hashCode => Object.hashAll(_toList())
;
}

class GATTServiceApi {
  GATTServiceApi({
    required this.id,
    required this.uuid,
    required this.isPrimary,
    required this.includedServices,
    required this.characteristics,
  });

  int id;

  String uuid;

  bool isPrimary;

  List<GATTServiceApi> includedServices;

  List<GATTCharacteristicApi> characteristics;

  List<Object?> _toList() {
    return <Object?>[
      id,
      uuid,
      isPrimary,
      includedServices,
      characteristics,
    ];
  }

  Object encode() {
    return _toList();  }

  static GATTServiceApi decode(Object result) {
    result as List<Object?>;
    return GATTServiceApi(
      id: result[0]! as int,
      uuid: result[1]! as String,
      isPrimary: result[2]! as bool,
      includedServices: (result[3] as List<Object?>?)!.cast<GATTServiceApi>(),
      characteristics: (result[4] as List<Object?>?)!.cast<GATTCharacteristicApi>(),
    );
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  bool operator ==(Object other) {
    if (other is! GATTServiceApi || other.runtimeType != runtimeType) {
      return false;
    }
    if (identical(this, other)) {
      return true;
    }
    return 
      id == other.id
      && uuid == other.uuid
      && isPrimary == other.isPrimary
      && _deepEquals(includedServices, other.includedServices)
      && _deepEquals(characteristics, other.characteristics);
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  int get hashCode => Object.hashAll(_toList())
;
}

class MutableGATTDescriptorApi {
  MutableGATTDescriptorApi({
    required this.id,
    required this.uuid,
    required this.permissions,
  });

  int id;

  String uuid;

  List<GATTPermissionApi> permissions;

  List<Object?> _toList() {
    return <Object?>[
      id,
      uuid,
      permissions,
    ];
  }

  Object encode() {
    return _toList();  }

  static MutableGATTDescriptorApi decode(Object result) {
    result as List<Object?>;
    return MutableGATTDescriptorApi(
      id: result[0]! as int,
      uuid: result[1]! as String,
      permissions: (result[2] as List<Object?>?)!.cast<GATTPermissionApi>(),
    );
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  bool operator ==(Object other) {
    if (other is! MutableGATTDescriptorApi || other.runtimeType != runtimeType) {
      return false;
    }
    if (identical(this, other)) {
      return true;
    }
    return 
      id == other.id
      && uuid == other.uuid
      && _deepEquals(permissions, other.permissions);
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  int get hashCode => Object.hashAll(_toList())
;
}

class MutableGATTCharacteristicApi {
  MutableGATTCharacteristicApi({
    required this.id,
    required this.uuid,
    required this.permissions,
    required this.properties,
    required this.descriptors,
  });

  int id;

  String uuid;

  List<GATTPermissionApi> permissions;

  List<GATTCharacteristicPropertyApi> properties;

  List<GATTDescriptorApi> descriptors;

  List<Object?> _toList() {
    return <Object?>[
      id,
      uuid,
      permissions,
      properties,
      descriptors,
    ];
  }

  Object encode() {
    return _toList();  }

  static MutableGATTCharacteristicApi decode(Object result) {
    result as List<Object?>;
    return MutableGATTCharacteristicApi(
      id: result[0]! as int,
      uuid: result[1]! as String,
      permissions: (result[2] as List<Object?>?)!.cast<GATTPermissionApi>(),
      properties: (result[3] as List<Object?>?)!.cast<GATTCharacteristicPropertyApi>(),
      descriptors: (result[4] as List<Object?>?)!.cast<GATTDescriptorApi>(),
    );
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  bool operator ==(Object other) {
    if (other is! MutableGATTCharacteristicApi || other.runtimeType != runtimeType) {
      return false;
    }
    if (identical(this, other)) {
      return true;
    }
    return 
      id == other.id
      && uuid == other.uuid
      && _deepEquals(permissions, other.permissions)
      && _deepEquals(properties, other.properties)
      && _deepEquals(descriptors, other.descriptors);
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  int get hashCode => Object.hashAll(_toList())
;
}

class MutableGATTServiceApi {
  MutableGATTServiceApi({
    required this.id,
    required this.uuid,
    required this.isPrimary,
    required this.includedServices,
    required this.characteristics,
  });

  int id;

  String uuid;

  bool isPrimary;

  List<MutableGATTServiceApi> includedServices;

  List<MutableGATTCharacteristicApi> characteristics;

  List<Object?> _toList() {
    return <Object?>[
      id,
      uuid,
      isPrimary,
      includedServices,
      characteristics,
    ];
  }

  Object encode() {
    return _toList();  }

  static MutableGATTServiceApi decode(Object result) {
    result as List<Object?>;
    return MutableGATTServiceApi(
      id: result[0]! as int,
      uuid: result[1]! as String,
      isPrimary: result[2]! as bool,
      includedServices: (result[3] as List<Object?>?)!.cast<MutableGATTServiceApi>(),
      characteristics: (result[4] as List<Object?>?)!.cast<MutableGATTCharacteristicApi>(),
    );
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  bool operator ==(Object other) {
    if (other is! MutableGATTServiceApi || other.runtimeType != runtimeType) {
      return false;
    }
    if (identical(this, other)) {
      return true;
    }
    return 
      id == other.id
      && uuid == other.uuid
      && isPrimary == other.isPrimary
      && _deepEquals(includedServices, other.includedServices)
      && _deepEquals(characteristics, other.characteristics);
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  int get hashCode => Object.hashAll(_toList())
;
}

class GATTReadRequestApi {
  GATTReadRequestApi({
    required this.id,
    required this.offset,
    required this.length,
  });

  int id;

  int offset;

  int length;

  List<Object?> _toList() {
    return <Object?>[
      id,
      offset,
      length,
    ];
  }

  Object encode() {
    return _toList();  }

  static GATTReadRequestApi decode(Object result) {
    result as List<Object?>;
    return GATTReadRequestApi(
      id: result[0]! as int,
      offset: result[1]! as int,
      length: result[2]! as int,
    );
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  bool operator ==(Object other) {
    if (other is! GATTReadRequestApi || other.runtimeType != runtimeType) {
      return false;
    }
    if (identical(this, other)) {
      return true;
    }
    return 
      id == other.id
      && offset == other.offset
      && length == other.length;
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  int get hashCode => Object.hashAll(_toList())
;
}

class GATTWriteRequestApi {
  GATTWriteRequestApi({
    required this.id,
    required this.offset,
    required this.value,
  });

  int id;

  int offset;

  Uint8List value;

  List<Object?> _toList() {
    return <Object?>[
      id,
      offset,
      value,
    ];
  }

  Object encode() {
    return _toList();  }

  static GATTWriteRequestApi decode(Object result) {
    result as List<Object?>;
    return GATTWriteRequestApi(
      id: result[0]! as int,
      offset: result[1]! as int,
      value: result[2]! as Uint8List,
    );
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  bool operator ==(Object other) {
    if (other is! GATTWriteRequestApi || other.runtimeType != runtimeType) {
      return false;
    }
    if (identical(this, other)) {
      return true;
    }
    return 
      id == other.id
      && offset == other.offset
      && _deepEquals(value, other.value);
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  int get hashCode => Object.hashAll(_toList())
;
}


class _PigeonCodec extends StandardMessageCodec {
  const _PigeonCodec();
  @override
  void writeValue(WriteBuffer buffer, Object? value) {
    if (value is int) {
      buffer.putUint8(4);
      buffer.putInt64(value);
    }    else if (value is BluetoothLowEnergyStateApi) {
      buffer.putUint8(129);
      writeValue(buffer, value.index);
    }    else if (value is ConnectionStateApi) {
      buffer.putUint8(130);
      writeValue(buffer, value.index);
    }    else if (value is ConnectionPriorityApi) {
      buffer.putUint8(131);
      writeValue(buffer, value.index);
    }    else if (value is GATTPermissionApi) {
      buffer.putUint8(132);
      writeValue(buffer, value.index);
    }    else if (value is GATTCharacteristicPropertyApi) {
      buffer.putUint8(133);
      writeValue(buffer, value.index);
    }    else if (value is GATTCharacteristicWriteTypeApi) {
      buffer.putUint8(134);
      writeValue(buffer, value.index);
    }    else if (value is GATTErrorApi) {
      buffer.putUint8(135);
      writeValue(buffer, value.index);
    }    else if (value is PeripheralApi) {
      buffer.putUint8(136);
      writeValue(buffer, value.encode());
    }    else if (value is CentralApi) {
      buffer.putUint8(137);
      writeValue(buffer, value.encode());
    }    else if (value is ManufacturerSpecificDataApi) {
      buffer.putUint8(138);
      writeValue(buffer, value.encode());
    }    else if (value is AdvertisementApi) {
      buffer.putUint8(139);
      writeValue(buffer, value.encode());
    }    else if (value is GATTDescriptorApi) {
      buffer.putUint8(140);
      writeValue(buffer, value.encode());
    }    else if (value is GATTCharacteristicApi) {
      buffer.putUint8(141);
      writeValue(buffer, value.encode());
    }    else if (value is GATTServiceApi) {
      buffer.putUint8(142);
      writeValue(buffer, value.encode());
    }    else if (value is MutableGATTDescriptorApi) {
      buffer.putUint8(143);
      writeValue(buffer, value.encode());
    }    else if (value is MutableGATTCharacteristicApi) {
      buffer.putUint8(144);
      writeValue(buffer, value.encode());
    }    else if (value is MutableGATTServiceApi) {
      buffer.putUint8(145);
      writeValue(buffer, value.encode());
    }    else if (value is GATTReadRequestApi) {
      buffer.putUint8(146);
      writeValue(buffer, value.encode());
    }    else if (value is GATTWriteRequestApi) {
      buffer.putUint8(147);
      writeValue(buffer, value.encode());
    } else {
      super.writeValue(buffer, value);
    }
  }

  @override
  Object? readValueOfType(int type, ReadBuffer buffer) {
    switch (type) {
      case 129: 
        final int? value = readValue(buffer) as int?;
        return value == null ? null : BluetoothLowEnergyStateApi.values[value];
      case 130: 
        final int? value = readValue(buffer) as int?;
        return value == null ? null : ConnectionStateApi.values[value];
      case 131: 
        final int? value = readValue(buffer) as int?;
        return value == null ? null : ConnectionPriorityApi.values[value];
      case 132: 
        final int? value = readValue(buffer) as int?;
        return value == null ? null : GATTPermissionApi.values[value];
      case 133: 
        final int? value = readValue(buffer) as int?;
        return value == null ? null : GATTCharacteristicPropertyApi.values[value];
      case 134: 
        final int? value = readValue(buffer) as int?;
        return value == null ? null : GATTCharacteristicWriteTypeApi.values[value];
      case 135: 
        final int? value = readValue(buffer) as int?;
        return value == null ? null : GATTErrorApi.values[value];
      case 136: 
        return PeripheralApi.decode(readValue(buffer)!);
      case 137: 
        return CentralApi.decode(readValue(buffer)!);
      case 138: 
        return ManufacturerSpecificDataApi.decode(readValue(buffer)!);
      case 139: 
        return AdvertisementApi.decode(readValue(buffer)!);
      case 140: 
        return GATTDescriptorApi.decode(readValue(buffer)!);
      case 141: 
        return GATTCharacteristicApi.decode(readValue(buffer)!);
      case 142: 
        return GATTServiceApi.decode(readValue(buffer)!);
      case 143: 
        return MutableGATTDescriptorApi.decode(readValue(buffer)!);
      case 144: 
        return MutableGATTCharacteristicApi.decode(readValue(buffer)!);
      case 145: 
        return MutableGATTServiceApi.decode(readValue(buffer)!);
      case 146: 
        return GATTReadRequestApi.decode(readValue(buffer)!);
      case 147: 
        return GATTWriteRequestApi.decode(readValue(buffer)!);
      default:
        return super.readValueOfType(type, buffer);
    }
  }
}

class CentralManagerHostApi {
  /// Constructor for [CentralManagerHostApi].  The [binaryMessenger] named argument is
  /// available for dependency injection.  If it is left null, the default
  /// BinaryMessenger will be used which routes to the host platform.
  CentralManagerHostApi({BinaryMessenger? binaryMessenger, String messageChannelSuffix = ''})
      : pigeonVar_binaryMessenger = binaryMessenger,
        pigeonVar_messageChannelSuffix = messageChannelSuffix.isNotEmpty ? '.$messageChannelSuffix' : '';
  final BinaryMessenger? pigeonVar_binaryMessenger;

  static const MessageCodec<Object?> pigeonChannelCodec = _PigeonCodec();

  final String pigeonVar_messageChannelSuffix;

  Future<void> addStateChangedListener() async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.bluetooth_low_energy_android.CentralManagerHostApi.addStateChangedListener$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(null);
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> removeStateChangedListener() async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.bluetooth_low_energy_android.CentralManagerHostApi.removeStateChangedListener$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(null);
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> addNameChangedListener() async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.bluetooth_low_energy_android.CentralManagerHostApi.addNameChangedListener$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(null);
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> removeNameChangedListener() async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.bluetooth_low_energy_android.CentralManagerHostApi.removeNameChangedListener$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(null);
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> addDiscoveredListener() async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.bluetooth_low_energy_android.CentralManagerHostApi.addDiscoveredListener$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(null);
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> removeDiscoveredListener() async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.bluetooth_low_energy_android.CentralManagerHostApi.removeDiscoveredListener$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(null);
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> addConnectionStateChangedListener() async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.bluetooth_low_energy_android.CentralManagerHostApi.addConnectionStateChangedListener$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(null);
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> removeConnectionStateChangedListener() async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.bluetooth_low_energy_android.CentralManagerHostApi.removeConnectionStateChangedListener$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(null);
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> addMTUChanagedListener() async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.bluetooth_low_energy_android.CentralManagerHostApi.addMTUChanagedListener$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(null);
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> removeMTUChangedListener() async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.bluetooth_low_energy_android.CentralManagerHostApi.removeMTUChangedListener$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(null);
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> addCharacteristicNotifiedListener() async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.bluetooth_low_energy_android.CentralManagerHostApi.addCharacteristicNotifiedListener$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(null);
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> removeCharacteristicNotifiedListener() async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.bluetooth_low_energy_android.CentralManagerHostApi.removeCharacteristicNotifiedListener$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(null);
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<BluetoothLowEnergyStateApi> getState() async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.bluetooth_low_energy_android.CentralManagerHostApi.getState$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(null);
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else if (pigeonVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (pigeonVar_replyList[0] as BluetoothLowEnergyStateApi?)!;
    }
  }

  Future<bool> shouldShowAuthorizeRationale() async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.bluetooth_low_energy_android.CentralManagerHostApi.shouldShowAuthorizeRationale$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(null);
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else if (pigeonVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (pigeonVar_replyList[0] as bool?)!;
    }
  }

  Future<bool> authorize() async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.bluetooth_low_energy_android.CentralManagerHostApi.authorize$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(null);
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else if (pigeonVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (pigeonVar_replyList[0] as bool?)!;
    }
  }

  Future<void> showAppSettings() async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.bluetooth_low_energy_android.CentralManagerHostApi.showAppSettings$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(null);
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> turnOn() async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.bluetooth_low_energy_android.CentralManagerHostApi.turnOn$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(null);
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> turnOff() async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.bluetooth_low_energy_android.CentralManagerHostApi.turnOff$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(null);
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<String?> getName() async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.bluetooth_low_energy_android.CentralManagerHostApi.getName$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(null);
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return (pigeonVar_replyList[0] as String?);
    }
  }

  Future<String?> setName(String? name) async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.bluetooth_low_energy_android.CentralManagerHostApi.setName$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(<Object?>[name]);
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return (pigeonVar_replyList[0] as String?);
    }
  }

  Future<void> startDiscovery(List<String> serviceUUIDs) async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.bluetooth_low_energy_android.CentralManagerHostApi.startDiscovery$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(<Object?>[serviceUUIDs]);
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> stopDiscovery() async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.bluetooth_low_energy_android.CentralManagerHostApi.stopDiscovery$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(null);
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<List<PeripheralApi>> retrieveConnectedPeripherals() async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.bluetooth_low_energy_android.CentralManagerHostApi.retrieveConnectedPeripherals$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(null);
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else if (pigeonVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (pigeonVar_replyList[0] as List<Object?>?)!.cast<PeripheralApi>();
    }
  }

  Future<void> connect(String address) async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.bluetooth_low_energy_android.CentralManagerHostApi.connect$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(<Object?>[address]);
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> disconnect(String address) async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.bluetooth_low_energy_android.CentralManagerHostApi.disconnect$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(<Object?>[address]);
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<int> requestMTU(String address, int mtu) async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.bluetooth_low_energy_android.CentralManagerHostApi.requestMTU$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(<Object?>[address, mtu]);
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else if (pigeonVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (pigeonVar_replyList[0] as int?)!;
    }
  }

  Future<void> requestConnectionPriority(String address, ConnectionPriorityApi priority) async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.bluetooth_low_energy_android.CentralManagerHostApi.requestConnectionPriority$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(<Object?>[address, priority]);
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<int> getMaximumWriteLength(String address, GATTCharacteristicWriteTypeApi type) async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.bluetooth_low_energy_android.CentralManagerHostApi.getMaximumWriteLength$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(<Object?>[address, type]);
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else if (pigeonVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (pigeonVar_replyList[0] as int?)!;
    }
  }

  Future<int> readRSSI(String address) async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.bluetooth_low_energy_android.CentralManagerHostApi.readRSSI$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(<Object?>[address]);
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else if (pigeonVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (pigeonVar_replyList[0] as int?)!;
    }
  }

  Future<List<GATTServiceApi>> discoverServices(String address) async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.bluetooth_low_energy_android.CentralManagerHostApi.discoverServices$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(<Object?>[address]);
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else if (pigeonVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (pigeonVar_replyList[0] as List<Object?>?)!.cast<GATTServiceApi>();
    }
  }

  Future<Uint8List> readCharacteristic(int id) async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.bluetooth_low_energy_android.CentralManagerHostApi.readCharacteristic$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(<Object?>[id]);
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else if (pigeonVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (pigeonVar_replyList[0] as Uint8List?)!;
    }
  }

  Future<void> writeCharacteristic(int id, Uint8List value, GATTCharacteristicWriteTypeApi type) async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.bluetooth_low_energy_android.CentralManagerHostApi.writeCharacteristic$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(<Object?>[id, value, type]);
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> setCharacteristicNotifyState(int id, bool state) async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.bluetooth_low_energy_android.CentralManagerHostApi.setCharacteristicNotifyState$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(<Object?>[id, state]);
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<Uint8List> readDescriptor(int id) async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.bluetooth_low_energy_android.CentralManagerHostApi.readDescriptor$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(<Object?>[id]);
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else if (pigeonVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (pigeonVar_replyList[0] as Uint8List?)!;
    }
  }

  Future<void> writeDescriptor(int id, Uint8List value) async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.bluetooth_low_energy_android.CentralManagerHostApi.writeDescriptor$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(<Object?>[id, value]);
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }
}

abstract class CentralManagerFlutterApi {
  static const MessageCodec<Object?> pigeonChannelCodec = _PigeonCodec();

  void onStateChanged(BluetoothLowEnergyStateApi state);

  void onNameChanged(String? name);

  void onDiscovered(PeripheralApi peripheral, int rssi, AdvertisementApi advertisement);

  void onConnectionStateChanged(PeripheralApi peripheral, ConnectionStateApi state);

  void onMTUChanged(PeripheralApi peripheral, int mtu);

  void onCharacteristicNotified(GATTCharacteristicApi characteristic, Uint8List value);

  static void setUp(CentralManagerFlutterApi? api, {BinaryMessenger? binaryMessenger, String messageChannelSuffix = '',}) {
    messageChannelSuffix = messageChannelSuffix.isNotEmpty ? '.$messageChannelSuffix' : '';
    {
      final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.bluetooth_low_energy_android.CentralManagerFlutterApi.onStateChanged$messageChannelSuffix', pigeonChannelCodec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        pigeonVar_channel.setMessageHandler(null);
      } else {
        pigeonVar_channel.setMessageHandler((Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.bluetooth_low_energy_android.CentralManagerFlutterApi.onStateChanged was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final BluetoothLowEnergyStateApi? arg_state = (args[0] as BluetoothLowEnergyStateApi?);
          assert(arg_state != null,
              'Argument for dev.flutter.pigeon.bluetooth_low_energy_android.CentralManagerFlutterApi.onStateChanged was null, expected non-null BluetoothLowEnergyStateApi.');
          try {
            api.onStateChanged(arg_state!);
            return wrapResponse(empty: true);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          }          catch (e) {
            return wrapResponse(error: PlatformException(code: 'error', message: e.toString()));
          }
        });
      }
    }
    {
      final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.bluetooth_low_energy_android.CentralManagerFlutterApi.onNameChanged$messageChannelSuffix', pigeonChannelCodec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        pigeonVar_channel.setMessageHandler(null);
      } else {
        pigeonVar_channel.setMessageHandler((Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.bluetooth_low_energy_android.CentralManagerFlutterApi.onNameChanged was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final String? arg_name = (args[0] as String?);
          try {
            api.onNameChanged(arg_name);
            return wrapResponse(empty: true);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          }          catch (e) {
            return wrapResponse(error: PlatformException(code: 'error', message: e.toString()));
          }
        });
      }
    }
    {
      final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.bluetooth_low_energy_android.CentralManagerFlutterApi.onDiscovered$messageChannelSuffix', pigeonChannelCodec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        pigeonVar_channel.setMessageHandler(null);
      } else {
        pigeonVar_channel.setMessageHandler((Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.bluetooth_low_energy_android.CentralManagerFlutterApi.onDiscovered was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final PeripheralApi? arg_peripheral = (args[0] as PeripheralApi?);
          assert(arg_peripheral != null,
              'Argument for dev.flutter.pigeon.bluetooth_low_energy_android.CentralManagerFlutterApi.onDiscovered was null, expected non-null PeripheralApi.');
          final int? arg_rssi = (args[1] as int?);
          assert(arg_rssi != null,
              'Argument for dev.flutter.pigeon.bluetooth_low_energy_android.CentralManagerFlutterApi.onDiscovered was null, expected non-null int.');
          final AdvertisementApi? arg_advertisement = (args[2] as AdvertisementApi?);
          assert(arg_advertisement != null,
              'Argument for dev.flutter.pigeon.bluetooth_low_energy_android.CentralManagerFlutterApi.onDiscovered was null, expected non-null AdvertisementApi.');
          try {
            api.onDiscovered(arg_peripheral!, arg_rssi!, arg_advertisement!);
            return wrapResponse(empty: true);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          }          catch (e) {
            return wrapResponse(error: PlatformException(code: 'error', message: e.toString()));
          }
        });
      }
    }
    {
      final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.bluetooth_low_energy_android.CentralManagerFlutterApi.onConnectionStateChanged$messageChannelSuffix', pigeonChannelCodec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        pigeonVar_channel.setMessageHandler(null);
      } else {
        pigeonVar_channel.setMessageHandler((Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.bluetooth_low_energy_android.CentralManagerFlutterApi.onConnectionStateChanged was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final PeripheralApi? arg_peripheral = (args[0] as PeripheralApi?);
          assert(arg_peripheral != null,
              'Argument for dev.flutter.pigeon.bluetooth_low_energy_android.CentralManagerFlutterApi.onConnectionStateChanged was null, expected non-null PeripheralApi.');
          final ConnectionStateApi? arg_state = (args[1] as ConnectionStateApi?);
          assert(arg_state != null,
              'Argument for dev.flutter.pigeon.bluetooth_low_energy_android.CentralManagerFlutterApi.onConnectionStateChanged was null, expected non-null ConnectionStateApi.');
          try {
            api.onConnectionStateChanged(arg_peripheral!, arg_state!);
            return wrapResponse(empty: true);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          }          catch (e) {
            return wrapResponse(error: PlatformException(code: 'error', message: e.toString()));
          }
        });
      }
    }
    {
      final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.bluetooth_low_energy_android.CentralManagerFlutterApi.onMTUChanged$messageChannelSuffix', pigeonChannelCodec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        pigeonVar_channel.setMessageHandler(null);
      } else {
        pigeonVar_channel.setMessageHandler((Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.bluetooth_low_energy_android.CentralManagerFlutterApi.onMTUChanged was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final PeripheralApi? arg_peripheral = (args[0] as PeripheralApi?);
          assert(arg_peripheral != null,
              'Argument for dev.flutter.pigeon.bluetooth_low_energy_android.CentralManagerFlutterApi.onMTUChanged was null, expected non-null PeripheralApi.');
          final int? arg_mtu = (args[1] as int?);
          assert(arg_mtu != null,
              'Argument for dev.flutter.pigeon.bluetooth_low_energy_android.CentralManagerFlutterApi.onMTUChanged was null, expected non-null int.');
          try {
            api.onMTUChanged(arg_peripheral!, arg_mtu!);
            return wrapResponse(empty: true);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          }          catch (e) {
            return wrapResponse(error: PlatformException(code: 'error', message: e.toString()));
          }
        });
      }
    }
    {
      final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.bluetooth_low_energy_android.CentralManagerFlutterApi.onCharacteristicNotified$messageChannelSuffix', pigeonChannelCodec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        pigeonVar_channel.setMessageHandler(null);
      } else {
        pigeonVar_channel.setMessageHandler((Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.bluetooth_low_energy_android.CentralManagerFlutterApi.onCharacteristicNotified was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final GATTCharacteristicApi? arg_characteristic = (args[0] as GATTCharacteristicApi?);
          assert(arg_characteristic != null,
              'Argument for dev.flutter.pigeon.bluetooth_low_energy_android.CentralManagerFlutterApi.onCharacteristicNotified was null, expected non-null GATTCharacteristicApi.');
          final Uint8List? arg_value = (args[1] as Uint8List?);
          assert(arg_value != null,
              'Argument for dev.flutter.pigeon.bluetooth_low_energy_android.CentralManagerFlutterApi.onCharacteristicNotified was null, expected non-null Uint8List.');
          try {
            api.onCharacteristicNotified(arg_characteristic!, arg_value!);
            return wrapResponse(empty: true);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          }          catch (e) {
            return wrapResponse(error: PlatformException(code: 'error', message: e.toString()));
          }
        });
      }
    }
  }
}

class PeripheralManagerHostApi {
  /// Constructor for [PeripheralManagerHostApi].  The [binaryMessenger] named argument is
  /// available for dependency injection.  If it is left null, the default
  /// BinaryMessenger will be used which routes to the host platform.
  PeripheralManagerHostApi({BinaryMessenger? binaryMessenger, String messageChannelSuffix = ''})
      : pigeonVar_binaryMessenger = binaryMessenger,
        pigeonVar_messageChannelSuffix = messageChannelSuffix.isNotEmpty ? '.$messageChannelSuffix' : '';
  final BinaryMessenger? pigeonVar_binaryMessenger;

  static const MessageCodec<Object?> pigeonChannelCodec = _PigeonCodec();

  final String pigeonVar_messageChannelSuffix;

  Future<void> addStateChangedListener() async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.bluetooth_low_energy_android.PeripheralManagerHostApi.addStateChangedListener$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(null);
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> removeStateChangedListener() async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.bluetooth_low_energy_android.PeripheralManagerHostApi.removeStateChangedListener$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(null);
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> addNameChangedListener() async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.bluetooth_low_energy_android.PeripheralManagerHostApi.addNameChangedListener$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(null);
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> removeNameChangedListener() async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.bluetooth_low_energy_android.PeripheralManagerHostApi.removeNameChangedListener$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(null);
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> addConnectionStateChangedListener() async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.bluetooth_low_energy_android.PeripheralManagerHostApi.addConnectionStateChangedListener$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(null);
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> removeConnectionStateChangedListener() async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.bluetooth_low_energy_android.PeripheralManagerHostApi.removeConnectionStateChangedListener$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(null);
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> addMTUChangedListener() async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.bluetooth_low_energy_android.PeripheralManagerHostApi.addMTUChangedListener$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(null);
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> removeMTUChangedListener() async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.bluetooth_low_energy_android.PeripheralManagerHostApi.removeMTUChangedListener$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(null);
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> addCharacteristicReadRequestedListener() async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.bluetooth_low_energy_android.PeripheralManagerHostApi.addCharacteristicReadRequestedListener$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(null);
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> removeCharacteristicReadRequestedListener() async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.bluetooth_low_energy_android.PeripheralManagerHostApi.removeCharacteristicReadRequestedListener$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(null);
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> addCharacteristicWriteRequestedListener() async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.bluetooth_low_energy_android.PeripheralManagerHostApi.addCharacteristicWriteRequestedListener$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(null);
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> removeCharacteristicWriteRequestedListener() async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.bluetooth_low_energy_android.PeripheralManagerHostApi.removeCharacteristicWriteRequestedListener$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(null);
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> addCharacteristicNotifyStateChangedListener() async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.bluetooth_low_energy_android.PeripheralManagerHostApi.addCharacteristicNotifyStateChangedListener$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(null);
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> removeCharacteristicNotifyStateChangedListener() async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.bluetooth_low_energy_android.PeripheralManagerHostApi.removeCharacteristicNotifyStateChangedListener$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(null);
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> addDescriptorReadRequestedListener() async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.bluetooth_low_energy_android.PeripheralManagerHostApi.addDescriptorReadRequestedListener$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(null);
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> removeDescriptorReadRequestedListener() async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.bluetooth_low_energy_android.PeripheralManagerHostApi.removeDescriptorReadRequestedListener$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(null);
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> addDescriptorWriteRequestedListener() async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.bluetooth_low_energy_android.PeripheralManagerHostApi.addDescriptorWriteRequestedListener$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(null);
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> removeDescriptorWriteRequestedListener() async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.bluetooth_low_energy_android.PeripheralManagerHostApi.removeDescriptorWriteRequestedListener$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(null);
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<BluetoothLowEnergyStateApi> getState() async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.bluetooth_low_energy_android.PeripheralManagerHostApi.getState$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(null);
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else if (pigeonVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (pigeonVar_replyList[0] as BluetoothLowEnergyStateApi?)!;
    }
  }

  Future<bool> shouldShowAuthorizeRationale() async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.bluetooth_low_energy_android.PeripheralManagerHostApi.shouldShowAuthorizeRationale$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(null);
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else if (pigeonVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (pigeonVar_replyList[0] as bool?)!;
    }
  }

  Future<bool> authorize() async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.bluetooth_low_energy_android.PeripheralManagerHostApi.authorize$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(null);
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else if (pigeonVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (pigeonVar_replyList[0] as bool?)!;
    }
  }

  Future<void> showAppSettings() async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.bluetooth_low_energy_android.PeripheralManagerHostApi.showAppSettings$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(null);
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> turnOn() async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.bluetooth_low_energy_android.PeripheralManagerHostApi.turnOn$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(null);
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> turnOff() async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.bluetooth_low_energy_android.PeripheralManagerHostApi.turnOff$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(null);
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<String?> getName() async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.bluetooth_low_energy_android.PeripheralManagerHostApi.getName$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(null);
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return (pigeonVar_replyList[0] as String?);
    }
  }

  Future<String?> setName(String? name) async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.bluetooth_low_energy_android.PeripheralManagerHostApi.setName$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(<Object?>[name]);
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return (pigeonVar_replyList[0] as String?);
    }
  }

  Future<void> addService(MutableGATTServiceApi service) async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.bluetooth_low_energy_android.PeripheralManagerHostApi.addService$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(<Object?>[service]);
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> removeService(int id) async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.bluetooth_low_energy_android.PeripheralManagerHostApi.removeService$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(<Object?>[id]);
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> removeAllServices() async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.bluetooth_low_energy_android.PeripheralManagerHostApi.removeAllServices$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(null);
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> startAdvertising(AdvertisementApi advertisement) async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.bluetooth_low_energy_android.PeripheralManagerHostApi.startAdvertising$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(<Object?>[advertisement]);
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> stopAdvertising() async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.bluetooth_low_energy_android.PeripheralManagerHostApi.stopAdvertising$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(null);
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<int> getMaximumNotifyLength(String address) async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.bluetooth_low_energy_android.PeripheralManagerHostApi.getMaximumNotifyLength$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(<Object?>[address]);
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else if (pigeonVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (pigeonVar_replyList[0] as int?)!;
    }
  }

  Future<void> respondReadRequestWithValue(int id, Uint8List value) async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.bluetooth_low_energy_android.PeripheralManagerHostApi.respondReadRequestWithValue$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(<Object?>[id, value]);
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> respondReadRequestWithError(int id, GATTErrorApi error) async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.bluetooth_low_energy_android.PeripheralManagerHostApi.respondReadRequestWithError$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(<Object?>[id, error]);
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> respondWriteRequest(int id) async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.bluetooth_low_energy_android.PeripheralManagerHostApi.respondWriteRequest$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(<Object?>[id]);
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> respondWriteRequestWithError(int id, GATTErrorApi error) async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.bluetooth_low_energy_android.PeripheralManagerHostApi.respondWriteRequestWithError$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(<Object?>[id, error]);
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> notifyCharacteristic(int id, Uint8List value, List<String>? addresses) async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.bluetooth_low_energy_android.PeripheralManagerHostApi.notifyCharacteristic$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(<Object?>[id, value, addresses]);
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }
}

abstract class PeripheralManagerFlutterApi {
  static const MessageCodec<Object?> pigeonChannelCodec = _PigeonCodec();

  void onStateChanged(BluetoothLowEnergyStateApi state);

  void onNameChanged(String? name);

  void onConnectionStateChanged(CentralApi central, ConnectionStateApi state);

  void onMTUChanged(CentralApi central, int mtu);

  void onCharacteristicReadRequested(int id, CentralApi central, GATTReadRequestApi request);

  void onCharacteristicWriteRequested(int id, CentralApi central, GATTWriteRequestApi request);

  void onCharacteristicNotifyStateChanged(int id, CentralApi central, bool state);

  void onDescriptorReadRequested(int id, CentralApi central, GATTReadRequestApi request);

  void onDescriptorWriteRequested(int id, CentralApi central, GATTWriteRequestApi request);

  static void setUp(PeripheralManagerFlutterApi? api, {BinaryMessenger? binaryMessenger, String messageChannelSuffix = '',}) {
    messageChannelSuffix = messageChannelSuffix.isNotEmpty ? '.$messageChannelSuffix' : '';
    {
      final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.bluetooth_low_energy_android.PeripheralManagerFlutterApi.onStateChanged$messageChannelSuffix', pigeonChannelCodec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        pigeonVar_channel.setMessageHandler(null);
      } else {
        pigeonVar_channel.setMessageHandler((Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.bluetooth_low_energy_android.PeripheralManagerFlutterApi.onStateChanged was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final BluetoothLowEnergyStateApi? arg_state = (args[0] as BluetoothLowEnergyStateApi?);
          assert(arg_state != null,
              'Argument for dev.flutter.pigeon.bluetooth_low_energy_android.PeripheralManagerFlutterApi.onStateChanged was null, expected non-null BluetoothLowEnergyStateApi.');
          try {
            api.onStateChanged(arg_state!);
            return wrapResponse(empty: true);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          }          catch (e) {
            return wrapResponse(error: PlatformException(code: 'error', message: e.toString()));
          }
        });
      }
    }
    {
      final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.bluetooth_low_energy_android.PeripheralManagerFlutterApi.onNameChanged$messageChannelSuffix', pigeonChannelCodec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        pigeonVar_channel.setMessageHandler(null);
      } else {
        pigeonVar_channel.setMessageHandler((Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.bluetooth_low_energy_android.PeripheralManagerFlutterApi.onNameChanged was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final String? arg_name = (args[0] as String?);
          try {
            api.onNameChanged(arg_name);
            return wrapResponse(empty: true);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          }          catch (e) {
            return wrapResponse(error: PlatformException(code: 'error', message: e.toString()));
          }
        });
      }
    }
    {
      final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.bluetooth_low_energy_android.PeripheralManagerFlutterApi.onConnectionStateChanged$messageChannelSuffix', pigeonChannelCodec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        pigeonVar_channel.setMessageHandler(null);
      } else {
        pigeonVar_channel.setMessageHandler((Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.bluetooth_low_energy_android.PeripheralManagerFlutterApi.onConnectionStateChanged was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final CentralApi? arg_central = (args[0] as CentralApi?);
          assert(arg_central != null,
              'Argument for dev.flutter.pigeon.bluetooth_low_energy_android.PeripheralManagerFlutterApi.onConnectionStateChanged was null, expected non-null CentralApi.');
          final ConnectionStateApi? arg_state = (args[1] as ConnectionStateApi?);
          assert(arg_state != null,
              'Argument for dev.flutter.pigeon.bluetooth_low_energy_android.PeripheralManagerFlutterApi.onConnectionStateChanged was null, expected non-null ConnectionStateApi.');
          try {
            api.onConnectionStateChanged(arg_central!, arg_state!);
            return wrapResponse(empty: true);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          }          catch (e) {
            return wrapResponse(error: PlatformException(code: 'error', message: e.toString()));
          }
        });
      }
    }
    {
      final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.bluetooth_low_energy_android.PeripheralManagerFlutterApi.onMTUChanged$messageChannelSuffix', pigeonChannelCodec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        pigeonVar_channel.setMessageHandler(null);
      } else {
        pigeonVar_channel.setMessageHandler((Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.bluetooth_low_energy_android.PeripheralManagerFlutterApi.onMTUChanged was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final CentralApi? arg_central = (args[0] as CentralApi?);
          assert(arg_central != null,
              'Argument for dev.flutter.pigeon.bluetooth_low_energy_android.PeripheralManagerFlutterApi.onMTUChanged was null, expected non-null CentralApi.');
          final int? arg_mtu = (args[1] as int?);
          assert(arg_mtu != null,
              'Argument for dev.flutter.pigeon.bluetooth_low_energy_android.PeripheralManagerFlutterApi.onMTUChanged was null, expected non-null int.');
          try {
            api.onMTUChanged(arg_central!, arg_mtu!);
            return wrapResponse(empty: true);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          }          catch (e) {
            return wrapResponse(error: PlatformException(code: 'error', message: e.toString()));
          }
        });
      }
    }
    {
      final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.bluetooth_low_energy_android.PeripheralManagerFlutterApi.onCharacteristicReadRequested$messageChannelSuffix', pigeonChannelCodec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        pigeonVar_channel.setMessageHandler(null);
      } else {
        pigeonVar_channel.setMessageHandler((Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.bluetooth_low_energy_android.PeripheralManagerFlutterApi.onCharacteristicReadRequested was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final int? arg_id = (args[0] as int?);
          assert(arg_id != null,
              'Argument for dev.flutter.pigeon.bluetooth_low_energy_android.PeripheralManagerFlutterApi.onCharacteristicReadRequested was null, expected non-null int.');
          final CentralApi? arg_central = (args[1] as CentralApi?);
          assert(arg_central != null,
              'Argument for dev.flutter.pigeon.bluetooth_low_energy_android.PeripheralManagerFlutterApi.onCharacteristicReadRequested was null, expected non-null CentralApi.');
          final GATTReadRequestApi? arg_request = (args[2] as GATTReadRequestApi?);
          assert(arg_request != null,
              'Argument for dev.flutter.pigeon.bluetooth_low_energy_android.PeripheralManagerFlutterApi.onCharacteristicReadRequested was null, expected non-null GATTReadRequestApi.');
          try {
            api.onCharacteristicReadRequested(arg_id!, arg_central!, arg_request!);
            return wrapResponse(empty: true);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          }          catch (e) {
            return wrapResponse(error: PlatformException(code: 'error', message: e.toString()));
          }
        });
      }
    }
    {
      final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.bluetooth_low_energy_android.PeripheralManagerFlutterApi.onCharacteristicWriteRequested$messageChannelSuffix', pigeonChannelCodec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        pigeonVar_channel.setMessageHandler(null);
      } else {
        pigeonVar_channel.setMessageHandler((Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.bluetooth_low_energy_android.PeripheralManagerFlutterApi.onCharacteristicWriteRequested was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final int? arg_id = (args[0] as int?);
          assert(arg_id != null,
              'Argument for dev.flutter.pigeon.bluetooth_low_energy_android.PeripheralManagerFlutterApi.onCharacteristicWriteRequested was null, expected non-null int.');
          final CentralApi? arg_central = (args[1] as CentralApi?);
          assert(arg_central != null,
              'Argument for dev.flutter.pigeon.bluetooth_low_energy_android.PeripheralManagerFlutterApi.onCharacteristicWriteRequested was null, expected non-null CentralApi.');
          final GATTWriteRequestApi? arg_request = (args[2] as GATTWriteRequestApi?);
          assert(arg_request != null,
              'Argument for dev.flutter.pigeon.bluetooth_low_energy_android.PeripheralManagerFlutterApi.onCharacteristicWriteRequested was null, expected non-null GATTWriteRequestApi.');
          try {
            api.onCharacteristicWriteRequested(arg_id!, arg_central!, arg_request!);
            return wrapResponse(empty: true);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          }          catch (e) {
            return wrapResponse(error: PlatformException(code: 'error', message: e.toString()));
          }
        });
      }
    }
    {
      final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.bluetooth_low_energy_android.PeripheralManagerFlutterApi.onCharacteristicNotifyStateChanged$messageChannelSuffix', pigeonChannelCodec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        pigeonVar_channel.setMessageHandler(null);
      } else {
        pigeonVar_channel.setMessageHandler((Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.bluetooth_low_energy_android.PeripheralManagerFlutterApi.onCharacteristicNotifyStateChanged was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final int? arg_id = (args[0] as int?);
          assert(arg_id != null,
              'Argument for dev.flutter.pigeon.bluetooth_low_energy_android.PeripheralManagerFlutterApi.onCharacteristicNotifyStateChanged was null, expected non-null int.');
          final CentralApi? arg_central = (args[1] as CentralApi?);
          assert(arg_central != null,
              'Argument for dev.flutter.pigeon.bluetooth_low_energy_android.PeripheralManagerFlutterApi.onCharacteristicNotifyStateChanged was null, expected non-null CentralApi.');
          final bool? arg_state = (args[2] as bool?);
          assert(arg_state != null,
              'Argument for dev.flutter.pigeon.bluetooth_low_energy_android.PeripheralManagerFlutterApi.onCharacteristicNotifyStateChanged was null, expected non-null bool.');
          try {
            api.onCharacteristicNotifyStateChanged(arg_id!, arg_central!, arg_state!);
            return wrapResponse(empty: true);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          }          catch (e) {
            return wrapResponse(error: PlatformException(code: 'error', message: e.toString()));
          }
        });
      }
    }
    {
      final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.bluetooth_low_energy_android.PeripheralManagerFlutterApi.onDescriptorReadRequested$messageChannelSuffix', pigeonChannelCodec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        pigeonVar_channel.setMessageHandler(null);
      } else {
        pigeonVar_channel.setMessageHandler((Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.bluetooth_low_energy_android.PeripheralManagerFlutterApi.onDescriptorReadRequested was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final int? arg_id = (args[0] as int?);
          assert(arg_id != null,
              'Argument for dev.flutter.pigeon.bluetooth_low_energy_android.PeripheralManagerFlutterApi.onDescriptorReadRequested was null, expected non-null int.');
          final CentralApi? arg_central = (args[1] as CentralApi?);
          assert(arg_central != null,
              'Argument for dev.flutter.pigeon.bluetooth_low_energy_android.PeripheralManagerFlutterApi.onDescriptorReadRequested was null, expected non-null CentralApi.');
          final GATTReadRequestApi? arg_request = (args[2] as GATTReadRequestApi?);
          assert(arg_request != null,
              'Argument for dev.flutter.pigeon.bluetooth_low_energy_android.PeripheralManagerFlutterApi.onDescriptorReadRequested was null, expected non-null GATTReadRequestApi.');
          try {
            api.onDescriptorReadRequested(arg_id!, arg_central!, arg_request!);
            return wrapResponse(empty: true);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          }          catch (e) {
            return wrapResponse(error: PlatformException(code: 'error', message: e.toString()));
          }
        });
      }
    }
    {
      final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.bluetooth_low_energy_android.PeripheralManagerFlutterApi.onDescriptorWriteRequested$messageChannelSuffix', pigeonChannelCodec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        pigeonVar_channel.setMessageHandler(null);
      } else {
        pigeonVar_channel.setMessageHandler((Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.bluetooth_low_energy_android.PeripheralManagerFlutterApi.onDescriptorWriteRequested was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final int? arg_id = (args[0] as int?);
          assert(arg_id != null,
              'Argument for dev.flutter.pigeon.bluetooth_low_energy_android.PeripheralManagerFlutterApi.onDescriptorWriteRequested was null, expected non-null int.');
          final CentralApi? arg_central = (args[1] as CentralApi?);
          assert(arg_central != null,
              'Argument for dev.flutter.pigeon.bluetooth_low_energy_android.PeripheralManagerFlutterApi.onDescriptorWriteRequested was null, expected non-null CentralApi.');
          final GATTWriteRequestApi? arg_request = (args[2] as GATTWriteRequestApi?);
          assert(arg_request != null,
              'Argument for dev.flutter.pigeon.bluetooth_low_energy_android.PeripheralManagerFlutterApi.onDescriptorWriteRequested was null, expected non-null GATTWriteRequestApi.');
          try {
            api.onDescriptorWriteRequested(arg_id!, arg_central!, arg_request!);
            return wrapResponse(empty: true);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          }          catch (e) {
            return wrapResponse(error: PlatformException(code: 'error', message: e.toString()));
          }
        });
      }
    }
  }
}
